#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
"""
import os
import json
import logging
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)

class QualityController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ"""
    
    def __init__(self):
        self.quality_metrics = {
            "audio_quality": "good",
            "analysis_quality": "good", 
            "processing_speed": "normal"
        }
    
    def check_audio_quality(self, audio_path: str, original_video_path: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
            audio_size = os.path.getsize(audio_path)
            video_size = os.path.getsize(original_video_path)
            
            # –ê—É–¥–∏–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1-5% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ
            audio_ratio = audio_size / video_size
            
            quality_assessment = {
                "audio_size_mb": audio_size / (1024 * 1024),
                "video_size_mb": video_size / (1024 * 1024),
                "audio_ratio": audio_ratio,
                "quality": "good"
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            if audio_ratio < 0.005:  # –ú–µ–Ω—å—à–µ 0.5%
                quality_assessment["quality"] = "low"
                quality_assessment["warning"] = "–ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Ç–µ—Ä—è –∫–∞—á–µ—Å—Ç–≤–∞"
            elif audio_ratio > 0.1:  # –ë–æ–ª—å—à–µ 10%
                quality_assessment["quality"] = "inefficient"
                quality_assessment["warning"] = "–ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –º–æ–∂–Ω–æ —Å–∂–∞—Ç—å –±–æ–ª—å—à–µ"
            
            logger.info(f"üéµ –ö–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ: {quality_assessment['quality']}, —Ä–∞–∑–º–µ—Ä: {quality_assessment['audio_size_mb']:.1f}MB")
            return quality_assessment
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ: {e}")
            return {"quality": "unknown", "error": str(e)}
    
    def validate_analysis_quality(self, analysis_result: Dict, transcript_text: str, video_duration: float) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ ChatGPT"""
        try:
            highlights = analysis_result.get("highlights", [])
            
            quality_metrics = {
                "clips_count": len(highlights),
                "total_coverage": 0,
                "avg_clip_duration": 0,
                "title_quality": 0,
                "description_quality": 0,
                "time_validity": 0,
                "overall_quality": "good"
            }
            
            if not highlights:
                quality_metrics["overall_quality"] = "failed"
                quality_metrics["error"] = "–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª–∏–ø–æ–≤"
                return quality_metrics
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–µ–æ
            total_clip_duration = sum(h["end_time"] - h["start_time"] for h in highlights)
            quality_metrics["total_coverage"] = total_clip_duration / video_duration
            quality_metrics["avg_clip_duration"] = total_clip_duration / len(highlights)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            valid_titles = 0
            for highlight in highlights:
                title = highlight.get("title", "")
                if title and len(title.split()) >= 2 and len(title.split()) <= 6:
                    valid_titles += 1
            quality_metrics["title_quality"] = valid_titles / len(highlights)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ–ø–∏—Å–∞–Ω–∏–π
            valid_descriptions = 0
            for highlight in highlights:
                description = highlight.get("description", "")
                if description and len(description) > 10:
                    valid_descriptions += 1
            quality_metrics["description_quality"] = valid_descriptions / len(highlights)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
            valid_times = 0
            for highlight in highlights:
                start = highlight.get("start_time", 0)
                end = highlight.get("end_time", 0)
                if 0 <= start < end <= video_duration and (end - start) >= 30:
                    valid_times += 1
            quality_metrics["time_validity"] = valid_times / len(highlights)
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            overall_score = (
                quality_metrics["title_quality"] * 0.3 +
                quality_metrics["description_quality"] * 0.3 +
                quality_metrics["time_validity"] * 0.4
            )
            
            if overall_score >= 0.8:
                quality_metrics["overall_quality"] = "excellent"
            elif overall_score >= 0.6:
                quality_metrics["overall_quality"] = "good"
            elif overall_score >= 0.4:
                quality_metrics["overall_quality"] = "acceptable"
            else:
                quality_metrics["overall_quality"] = "poor"
            
            logger.info(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞: {quality_metrics['overall_quality']}, –ø–æ–∫—Ä—ã—Ç–∏–µ: {quality_metrics['total_coverage']:.1%}")
            return quality_metrics
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {"overall_quality": "error", "error": str(e)}
    
    def should_use_fast_mode(self, video_duration: float, transcript_length: int) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º"""
        
        # –§–∞–∫—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
        factors = {
            "short_video": video_duration <= 180,  # –ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ
            "simple_content": transcript_length <= 1000,  # –ü—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            "fast_mode_enabled": os.getenv("FAST_MODE", "false").lower() == "true",
            "high_load": False  # TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É —Å–∏—Å—Ç–µ–º—ã
        }
        
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
        if factors["fast_mode_enabled"]:
            if factors["short_video"] and factors["simple_content"]:
                logger.info("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ + –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                return True
            elif factors["short_video"]:
                logger.info("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ")
                return True
            elif factors["high_load"]:
                logger.info("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
                return True
        
        logger.info("üéØ –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞")
        return False
    
    def get_quality_report(self, video_id: str, processing_time: float, quality_metrics: Dict) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        report = {
            "video_id": video_id,
            "processing_time": processing_time,
            "quality_metrics": quality_metrics,
            "recommendations": [],
            "overall_rating": "good"
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if quality_metrics.get("audio_quality", {}).get("quality") == "low":
            report["recommendations"].append("–£–≤–µ–ª–∏—á–∏—Ç—å –±–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        
        if quality_metrics.get("analysis_quality", {}).get("overall_quality") == "poor":
            report["recommendations"].append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –≤–º–µ—Å—Ç–æ –±—ã—Å—Ç—Ä–æ–≥–æ")
        
        if processing_time > 120:  # –ë–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç
            report["recommendations"].append("–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∫–ª—é—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        
        # –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        audio_good = quality_metrics.get("audio_quality", {}).get("quality") in ["good", "excellent"]
        analysis_good = quality_metrics.get("analysis_quality", {}).get("overall_quality") in ["good", "excellent"]
        speed_good = processing_time <= 90
        
        if audio_good and analysis_good and speed_good:
            report["overall_rating"] = "excellent"
        elif audio_good and analysis_good:
            report["overall_rating"] = "good"
        elif audio_good or analysis_good:
            report["overall_rating"] = "acceptable"
        else:
            report["overall_rating"] = "poor"
        
        return report

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞
quality_controller = QualityController()

def enhanced_analyze_video_task(task_id: str, video_id: str, auto_emoji: bool = False):
    """–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞"""
    import time
    start_time = time.time()
    
    try:
        logger.info(f"üîç –ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞: {video_id}")
        
        # ... –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ...
        
        # –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
        processing_time = time.time() - start_time
        
        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_metrics = {
            "audio_quality": quality_controller.check_audio_quality(audio_path, video_path),
            "analysis_quality": quality_controller.validate_analysis_quality(analysis_result, transcript_text, video_duration)
        }
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        quality_report = quality_controller.get_quality_report(video_id, processing_time, quality_metrics)
        
        logger.info(f"üìä –û—Ç—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞: {quality_report['overall_rating']}, –≤—Ä–µ–º—è: {processing_time:.1f}s")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        analysis_tasks[task_id]["quality_report"] = quality_report
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        raise