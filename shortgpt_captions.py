# –ú–æ–¥—É–ª—å —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ ShortGPT
# –ü—Ä–æ—Å—Ç–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ —Ç—è–∂–µ–ª—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

import re
import logging

logger = logging.getLogger(__name__)

def getCaptionsWithTime(transcriptions, maxCaptionSize=15, considerPunctuation=True):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã —Å —Ç–∞–π–º–∏–Ω–≥–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ ShortGPT - –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    """
    time_splits = []
    current_caption = []
    current_length = 0
    
    # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç word-level —Ç–∞–π–º–∏–Ω–≥–∏
    segments = [seg for seg in transcriptions.get('segments', []) if 'words' in seg]
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    all_words = []
    for segment in segments:
        all_words.extend(segment['words'])
    
    for i, word in enumerate(all_words):
        word_text = word.get('text', '').strip()
        if not word_text:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ maxCaptionSize
        new_length = current_length + len(word_text) + (1 if current_caption else 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∑–¥–µ—Å—å
        should_split = (
            new_length > maxCaptionSize or
            (considerPunctuation and word_text.rstrip('.,!?') != word_text and current_caption) or
            i == len(all_words) - 1 or
            len(current_caption) >= 5
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –∫ —Ç–µ–∫—É—â–µ–º—É —Å—É–±—Ç–∏—Ç—Ä—É –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Ä–∞–∑–¥–µ–ª—è–µ–º
        if not should_split:
            current_caption.append(word_text)
            current_length = new_length
            continue
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        if current_caption:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
            if i == len(all_words) - 1 and new_length <= maxCaptionSize:
                current_caption.append(word_text)
                
            caption_text = ' '.join(current_caption)
            start_time = all_words[i - len(current_caption)]['start']
            end_time = word['end'] if word_text in current_caption else all_words[i - 1]['end']
            time_splits.append(((start_time, end_time), caption_text))
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å—É–±—Ç–∏—Ç—Ä—É
        if word_text not in current_caption and i == len(all_words) - 1:
            time_splits.append(((word['start'], word['end']), word_text))
            
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—É–±—Ç–∏—Ç—Ä–∞
        current_caption = []
        current_length = 0
        
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å—É–±—Ç–∏—Ç—Ä —Å —Ç–µ–∫—É—â–∏–º —Å–ª–æ–≤–æ–º –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
        if i < len(all_words) - 1:
            current_caption.append(word_text)
            current_length = len(word_text)
    
    return time_splits

def create_simple_subtitle_filter(segments, style='modern'):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π FFmpeg —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥—Ö–æ–¥–∞ ShortGPT
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 4 —Å—Ç–∏–ª—è: Modern, Neon, Fire, Elegant
    """
    if not segments:
        logger.warning("üìù –ù–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
        return ""
    
    logger.info(f"üìù –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤, —Å—Ç–∏–ª—å: {style}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ - –±–µ–ª—ã–π —Ü–≤–µ—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è 9:16
    styles = {
        'modern': {
            'fontsize': 48,  # –£–º–µ–Ω—å—à–∏–ª –¥–ª—è 9:16 —Ñ–æ—Ä–º–∞—Ç–∞
            'fontcolor': 'white',  # –í—Å–µ–≥–¥–∞ –±–µ–ª—ã–π –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            'bordercolor': 'black',  # –ß–µ—Ä–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
            'borderw': 3,
            'shadowcolor': 'black@0.5',
            'shadowx': 2,
            'shadowy': 2
        },
        'neon': {
            'fontsize': 48,
            'fontcolor': 'white',  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            'bordercolor': '#00FFFF',  # –ù–µ–æ–Ω–æ–≤–∞—è –æ–±–≤–æ–¥–∫–∞
            'borderw': 3,
            'shadowcolor': '#00FFFF@0.8',
            'shadowx': 0,
            'shadowy': 0
        },
        'fire': {
            'fontsize': 48,
            'fontcolor': 'white',  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            'bordercolor': '#FF0000',  # –û–≥–Ω–µ–Ω–Ω–∞—è –æ–±–≤–æ–¥–∫–∞
            'borderw': 3,
            'shadowcolor': '#FF4500@0.7',
            'shadowx': 3,
            'shadowy': 3
        },
        'elegant': {
            'fontsize': 48,
            'fontcolor': 'white',  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            'bordercolor': '#2C2C2C',  # –≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –æ–±–≤–æ–¥–∫–∞
            'borderw': 2,
            'shadowcolor': '#000000@0.6',
            'shadowx': 1,
            'shadowy': 1
        }
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∏–ª—è
    style_params = styles.get(style.lower(), styles['modern'])
    fontsize = style_params['fontsize']
    fontcolor = style_params['fontcolor']
    bordercolor = style_params['bordercolor']
    borderw = style_params['borderw']
    shadowcolor = style_params['shadowcolor']
    shadowx = style_params['shadowx']
    shadowy = style_params['shadowy']
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ drawtext —Ñ–∏–ª—å—Ç—Ä—ã
    drawtext_filters = []
    
    for i, segment in enumerate(segments):
        start_time = segment.get('start', 0)
        end_time = segment.get('end', 0)
        text = segment.get('text', '').strip()
        
        if not text or end_time <= start_time:
            continue
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –¥–ª—è FFmpeg
        text = re.sub(r"[^\w\s]", "", text)  # –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        text = text.strip()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(text) > 30:
            text = text[:27] + "..."
        
        if not text:
            continue
        
        # –°–æ–∑–¥–∞–µ–º drawtext —Ñ–∏–ª—å—Ç—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç–∏–ª–µ–π –∏ —Ç–µ–Ω–µ–π
        drawtext = f"drawtext=text={text}:fontsize={fontsize}:fontcolor={fontcolor}:bordercolor={bordercolor}:borderw={borderw}:shadowcolor={shadowcolor}:shadowx={shadowx}:shadowy={shadowy}:x=(w-text_w)/2:y=h-text_h-60:enable=between(t\\,{start_time}\\,{end_time})"
        
        drawtext_filters.append(drawtext)
        logger.info(f"üìù –°—É–±—Ç–∏—Ç—Ä {i+1}: '{text}' ({start_time:.1f}s - {end_time:.1f}s)")
    
    if not drawtext_filters:
        logger.warning("üìù –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
        return ""
    
    result = ",".join(drawtext_filters)
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {len(drawtext_filters)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    return result

def create_word_level_subtitles(transcript_data, max_caption_size=15):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã —Å word-level —Ç–∞–π–º–∏–Ω–≥–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–¥—Ö–æ–¥ ShortGPT
    """
    if not transcript_data or 'segments' not in transcript_data:
        logger.warning("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
        return []
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ ShortGPT
    captions_with_time = getCaptionsWithTime(transcript_data, max_caption_size)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
    subtitles = []
    for (start_time, end_time), text in captions_with_time:
        subtitles.append({
            'start': start_time,
            'end': end_time,
            'text': text.strip()
        })
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(subtitles)} —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å word-level —Ç–∞–π–º–∏–Ω–≥–∞–º–∏")
    return subtitles

