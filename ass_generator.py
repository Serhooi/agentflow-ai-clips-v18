#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ASS Generator - Модуль для создания ASS субтитров с караоке-эффектами
"""

import re
import time
import random
from typing import Dict, List, Any, Optional

class ASSGenerator:
    """Генератор ASS субтитров с караоке-эффектами"""
    
    def __init__(self):
        """Инициализация генератора ASS субтитров"""
        self.styles = {
            "default": {
                "Name": "Default",
                "Fontname": "Arial",
                "Fontsize": "24",
                "PrimaryColour": "&H00FFFFFF",  # Белый
                "SecondaryColour": "&H000000FF",  # Красный
                "OutlineColour": "&H00000000",  # Черный
                "BackColour": "&H80000000",  # Полупрозрачный черный
                "Bold": "0",
                "Italic": "0",
                "Underline": "0",
                "StrikeOut": "0",
                "ScaleX": "100",
                "ScaleY": "100",
                "Spacing": "0",
                "Angle": "0",
                "BorderStyle": "1",
                "Outline": "2",
                "Shadow": "2",
                "Alignment": "2",  # Центр внизу
                "MarginL": "10",
                "MarginR": "10",
                "MarginV": "10",
                "Encoding": "1"
            },
            "karaoke": {
                "Name": "Karaoke",
                "Fontname": "Arial",
                "Fontsize": "24",
                "PrimaryColour": "&H00FFFFFF",  # Белый
                "SecondaryColour": "&H0000FFFF",  # Желтый
                "OutlineColour": "&H00000000",  # Черный
                "BackColour": "&H80000000",  # Полупрозрачный черный
                "Bold": "1",
                "Italic": "0",
                "Underline": "0",
                "StrikeOut": "0",
                "ScaleX": "100",
                "ScaleY": "100",
                "Spacing": "0",
                "Angle": "0",
                "BorderStyle": "1",
                "Outline": "2",
                "Shadow": "2",
                "Alignment": "2",  # Центр внизу
                "MarginL": "10",
                "MarginR": "10",
                "MarginV": "10",
                "Encoding": "1"
            },
            "modern": {
                "Name": "Modern",
                "Fontname": "Roboto",
                "Fontsize": "28",
                "PrimaryColour": "&H00FFFFFF",  # Белый
                "SecondaryColour": "&H0000FFFF",  # Желтый
                "OutlineColour": "&H00000000",  # Черный
                "BackColour": "&H80000000",  # Полупрозрачный черный
                "Bold": "0",
                "Italic": "0",
                "Underline": "0",
                "StrikeOut": "0",
                "ScaleX": "100",
                "ScaleY": "100",
                "Spacing": "0",
                "Angle": "0",
                "BorderStyle": "1",
                "Outline": "1.5",
                "Shadow": "0",
                "Alignment": "2",  # Центр внизу
                "MarginL": "10",
                "MarginR": "10",
                "MarginV": "20",
                "Encoding": "1"
            }
        }
    
    def _format_time(self, seconds: float) -> str:
        """Форматирование времени в формат ASS (H:MM:SS.cc)"""
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        seconds = seconds % 60
        centiseconds = int((seconds - int(seconds)) * 100)
        return f"{hours}:{minutes:02d}:{int(seconds):02d}.{centiseconds:02d}"
    
    def _clean_text(self, text: str) -> str:
        """Очистка текста от специальных символов ASS"""
        # Заменяем символы, которые могут конфликтовать с синтаксисом ASS
        text = text.replace('\\', '\\\\')
        text = text.replace('{', '\\{')
        text = text.replace('}', '\\}')
        return text
    
    def _generate_header(self) -> str:
        """Генерация заголовка ASS файла"""
        header = """[Script Info]
; Script generated by AgentFlow AI Clips
Title: Auto-generated ASS subtitles
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: ?video
Video File: ?dummy
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
"""
        # Добавляем стили
        for style_name, style in self.styles.items():
            style_line = f"Style: {style['Name']}, {style['Fontname']}, {style['Fontsize']}, {style['PrimaryColour']}, {style['SecondaryColour']}, {style['OutlineColour']}, {style['BackColour']}, {style['Bold']}, {style['Italic']}, {style['Underline']}, {style['StrikeOut']}, {style['ScaleX']}, {style['ScaleY']}, {style['Spacing']}, {style['Angle']}, {style['BorderStyle']}, {style['Outline']}, {style['Shadow']}, {style['Alignment']}, {style['MarginL']}, {style['MarginR']}, {style['MarginV']}, {style['Encoding']}"
            header += style_line + "\n"
        
        header += """
[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""
        return header
    
    def _generate_karaoke_tags(self, words: List[Dict[str, Any]], segment_start: float) -> str:
        """Генерация тегов караоке для слов"""
        result = ""
        
        for word in words:
            word_text = self._clean_text(word["word"].strip())
            if not word_text:
                continue
                
            # Рассчитываем время относительно начала сегмента (в сотых секунды)
            start_time = int((word["start"] - segment_start) * 100)
            duration = int((word["end"] - word["start"]) * 100)
            
            # Добавляем тег караоке
            result += f"{{\\k{duration}}}{word_text} "
        
        return result.strip()
    
    def generate_from_whisper(self, transcript: Dict[str, Any], style: str = "modern") -> str:
        """Генерация ASS субтитров из транскрипта Whisper"""
        if "segments" not in transcript:
            return "Ошибка: неверный формат транскрипта"
        
        # Получаем стиль (или используем default)
        style_name = style if style in self.styles else "default"
        
        # Генерируем заголовок
        ass_content = self._generate_header()
        
        # Генерируем события (строки субтитров)
        for i, segment in enumerate(transcript["segments"]):
            # Получаем время начала и конца
            start_time = segment["start"]
            end_time = segment["end"]
            
            # Форматируем время
            start_formatted = self._format_time(start_time)
            end_formatted = self._format_time(end_time)
            
            # Получаем слова для караоке
            if "words" in segment and segment["words"]:
                # Генерируем караоке-теги
                text = self._generate_karaoke_tags(segment["words"], start_time)
                
                # Добавляем строку субтитров с караоке
                ass_content += f"Dialogue: 0,{start_formatted},{end_formatted},{style_name},,0,0,0,,{text}\n"
            else:
                # Если нет слов, просто добавляем текст сегмента
                text = self._clean_text(segment["text"])
                ass_content += f"Dialogue: 0,{start_formatted},{end_formatted},{style_name},,0,0,0,,{text}\n"
        
        return ass_content
    
    def generate_from_srt(self, srt_content: str, style: str = "default") -> str:
        """Конвертация SRT в ASS с караоке-эффектами"""
        # Получаем стиль
        style_name = style if style in self.styles else "default"
        
        # Генерируем заголовок
        ass_content = self._generate_header()
        
        # Парсим SRT
        pattern = r'(\d+)\n(\d{2}:\d{2}:\d{2},\d{3}) --> (\d{2}:\d{2}:\d{2},\d{3})\n([\s\S]*?)(?=\n\d+\n|$)'
        matches = re.findall(pattern, srt_content)
        
        for match in matches:
            # Получаем время начала и конца
            start_srt = match[1]
            end_srt = match[2]
            text = match[3].strip().replace('\n', '\\N')
            
            # Конвертируем время из SRT в ASS
            start_parts = start_srt.replace(',', '.').split(':')
            end_parts = end_srt.replace(',', '.').split(':')
            
            start_formatted = f"{int(start_parts[0])}:{start_parts[1]}:{start_parts[2]}"
            end_formatted = f"{int(end_parts[0])}:{end_parts[1]}:{end_parts[2]}"
            
            # Добавляем строку субтитров
            ass_content += f"Dialogue: 0,{start_formatted},{end_formatted},{style_name},,0,0,0,,{text}\n"
        
        return ass_content

