# –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–¥–∞
# –î–æ–±–∞–≤–ª—è–µ–º Redis –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏

import redis
import json
import uuid
from datetime import datetime
from typing import Dict, Optional
import asyncio
import logging

logger = logging.getLogger(__name__)

# Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
try:
    redis_client = redis.from_url(
        os.getenv("REDIS_URL", "redis://localhost:6379/0"),
        decode_responses=True
    )
    REDIS_AVAILABLE = True
    logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
except Exception as e:
    REDIS_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

class TaskQueue:
    """–ü—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –Ω–∞ Redis"""
    
    def __init__(self):
        self.queue_name = "video_processing_queue"
        self.processing_set = "processing_tasks"
        self.results_prefix = "task_result:"
        
    def add_task(self, task_data: Dict) -> str:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å"""
        if not REDIS_AVAILABLE:
            return None
            
        task_id = str(uuid.uuid4())
        task_data["task_id"] = task_id
        task_data["created_at"] = datetime.now().isoformat()
        
        try:
            redis_client.lpush(self.queue_name, json.dumps(task_data))
            logger.info(f"üìù –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {task_id}")
            return task_id
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return None
    
    def get_task(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        if not REDIS_AVAILABLE:
            return None
            
        try:
            # –ë–ª–æ–∫–∏—Ä—É—é—â–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∂–¥–µ–º –¥–æ 5 —Å–µ–∫—É–Ω–¥)
            result = redis_client.brpop(self.queue_name, timeout=5)
            if result:
                task_data = json.loads(result[1])
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
                redis_client.sadd(self.processing_set, task_data["task_id"])
                return task_data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return None
    
    def complete_task(self, task_id: str, result: Dict):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"""
        if not REDIS_AVAILABLE:
            return
            
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            redis_client.setex(
                f"{self.results_prefix}{task_id}",
                3600,  # 1 —á–∞—Å TTL
                json.dumps(result)
            )
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            redis_client.srem(self.processing_set, task_id)
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
    
    def get_task_result(self, task_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏"""
        if not REDIS_AVAILABLE:
            return None
            
        try:
            result = redis_client.get(f"{self.results_prefix}{task_id}")
            if result:
                return json.loads(result)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        return None
    
    def get_queue_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏"""
        if not REDIS_AVAILABLE:
            return {"queue_length": 0, "processing": 0}
            
        try:
            return {
                "queue_length": redis_client.llen(self.queue_name),
                "processing": redis_client.scard(self.processing_set),
                "redis_available": True
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"queue_length": 0, "processing": 0, "redis_available": False}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
task_queue = TaskQueue()

# –í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
class VideoWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∑–∞–¥–∞—á"""
    
    def __init__(self, worker_id: str):
        self.worker_id = worker_id
        self.running = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞"""
        self.running = True
        logger.info(f"üîÑ –í–æ—Ä–∫–µ—Ä {self.worker_id} –∑–∞–ø—É—â–µ–Ω")
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                task = task_queue.get_task()
                if task:
                    await self.process_task(task)
                else:
                    # –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                    await asyncio.sleep(1)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ {self.worker_id}: {e}")
                await asyncio.sleep(5)
    
    async def process_task(self, task: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        task_id = task["task_id"]
        video_id = task["video_id"]
        
        try:
            logger.info(f"üé¨ –í–æ—Ä–∫–µ—Ä {self.worker_id} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {task_id}")
            
            # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞
            result = await self.analyze_video_internal(video_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            task_queue.complete_task(task_id, {
                "status": "completed",
                "result": result,
                "worker_id": self.worker_id,
                "completed_at": datetime.now().isoformat()
            })
            
        except Exception as e:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
            task_queue.complete_task(task_id, {
                "status": "failed",
                "error": str(e),
                "worker_id": self.worker_id,
                "failed_at": datetime.now().isoformat()
            })
    
    async def analyze_video_internal(self, video_id: str) -> Dict:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ (–∫–æ–ø–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏)"""
        # –ó–¥–µ—Å—å –∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ analyze_video_task
        # –Ω–æ –¥–µ–ª–∞–µ–º –µ—ë –±–æ–ª–µ–µ –ª–µ–≥–∫–æ–≤–µ—Å–Ω–æ–π
        
        # –ù–∞—Ö–æ–¥–∏–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        video_files = [f for f in os.listdir(Config.UPLOAD_DIR) if f.startswith(video_id)]
        if not video_files:
            raise Exception("–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        video_path = os.path.join(Config.UPLOAD_DIR, video_files[0])
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
        audio_path = os.path.join(Config.AUDIO_DIR, f"{video_id}.wav")
        if not extract_audio(video_path, audio_path):
            raise Exception("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        transcript_result = safe_transcribe_audio(audio_path)
        if not transcript_result:
            raise Exception("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        
        # –ê–Ω–∞–ª–∏–∑ —Å ChatGPT
        video_duration = get_video_duration(video_path)
        
        if "words" in transcript_result:
            transcript_text = " ".join([word["word"] for word in transcript_result["words"]])
            transcript_words = transcript_result["words"]
        else:
            transcript_text = transcript_result.get("text", "")
            transcript_words = []
        
        analysis_result = analyze_with_chatgpt(transcript_text, video_duration)
        if not analysis_result:
            analysis_result = create_fallback_highlights(video_duration, 3)
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        try:
            os.remove(audio_path)
        except:
            pass
        
        return {
            "highlights": analysis_result["highlights"],
            "transcript": transcript_words,
            "video_duration": video_duration
        }
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        self.running = False
        logger.info(f"üõë –í–æ—Ä–∫–µ—Ä {self.worker_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤ —Ñ–æ–Ω–µ
workers = []

async def start_workers(num_workers: int = 3):
    """–ó–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤"""
    global workers
    
    for i in range(num_workers):
        worker = VideoWorker(f"worker_{i+1}")
        workers.append(worker)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(worker.start())
    
    logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω–æ {num_workers} –≤–æ—Ä–∫–µ—Ä–æ–≤")

def stop_all_workers():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤"""
    for worker in workers:
        worker.stop()
    workers.clear()