# video_processor.py - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å FFmpeg –∏ –≤—à–∏–≤–∞–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å burned-in —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –≤ —Å—Ç–∏–ª–µ Opus.pro

import os
import subprocess
import logging
from typing import Dict, List, Optional, Tuple
import json
import tempfile
from pathlib import Path

logger = logging.getLogger(__name__)

class VideoProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–æ–≤ —Å –≤—à–∏—Ç—ã–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏"""
    
    def __init__(self):
        self.temp_dir = tempfile.gettempdir()
        self.supported_formats = ['.mp4', '.mov', '.avi', '.mkv', '.webm']
        
    def check_ffmpeg(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg"""
        try:
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True, timeout=10)
            return result.returncode == 0
        except Exception as e:
            logger.error(f"FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    def get_video_info(self, video_path: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ"""
        try:
            cmd = [
                'ffprobe', '-v', 'quiet', '-print_format', 'json',
                '-show_format', '-show_streams', video_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                info = json.loads(result.stdout)
                
                # –ù–∞—Ö–æ–¥–∏–º –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫
                video_stream = None
                for stream in info.get('streams', []):
                    if stream.get('codec_type') == 'video':
                        video_stream = stream
                        break
                
                if video_stream:
                    return {
                        'duration': float(info['format'].get('duration', 0)),
                        'width': int(video_stream.get('width', 0)),
                        'height': int(video_stream.get('height', 0)),
                        'fps': eval(video_stream.get('r_frame_rate', '30/1')),
                        'codec': video_stream.get('codec_name', 'unknown'),
                        'bitrate': int(info['format'].get('bit_rate', 0))
                    }
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")
            return None
    
    def create_subtitle_filter(self, subtitle_data: Dict, style: str = "modern", 
                             position: str = "bottom") -> str:
        """–°–æ–∑–¥–∞–µ—Ç FFmpeg —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è
        styles = {
            "modern": {
                "fontfile": "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",
                "fontsize": "24",
                "fontcolor": "white",
                "borderw": "2",
                "bordercolor": "black",
                "shadowcolor": "black@0.5",
                "shadowx": "2",
                "shadowy": "2"
            },
            "classic": {
                "fontfile": "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
                "fontsize": "20",
                "fontcolor": "white",
                "borderw": "1",
                "bordercolor": "black"
            },
            "neon": {
                "fontfile": "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",
                "fontsize": "26",
                "fontcolor": "cyan",
                "borderw": "3",
                "bordercolor": "blue",
                "shadowcolor": "cyan@0.8",
                "shadowx": "0",
                "shadowy": "0"
            },
            "minimal": {
                "fontfile": "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
                "fontsize": "18",
                "fontcolor": "white",
                "borderw": "1",
                "bordercolor": "black"
            }
        }
        
        style_config = styles.get(style, styles["modern"])
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if position == "bottom":
            y_position = "h-th-20"
        elif position == "top":
            y_position = "20"
        else:  # center
            y_position = "(h-th)/2"
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
        filter_parts = []
        filter_parts.append(f"fontfile={style_config['fontfile']}")
        filter_parts.append(f"fontsize={style_config['fontsize']}")
        filter_parts.append(f"fontcolor={style_config['fontcolor']}")
        filter_parts.append(f"borderw={style_config['borderw']}")
        filter_parts.append(f"bordercolor={style_config['bordercolor']}")
        filter_parts.append(f"x=(w-tw)/2")  # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        filter_parts.append(f"y={y_position}")
        
        if "shadowcolor" in style_config:
            filter_parts.append(f"shadowcolor={style_config['shadowcolor']}")
            filter_parts.append(f"shadowx={style_config['shadowx']}")
            filter_parts.append(f"shadowy={style_config['shadowy']}")
        
        return ":".join(filter_parts)
    
    def create_karaoke_video(self, video_path: str, subtitle_data: Dict, 
                           output_path: str, style: str = "modern",
                           position: str = "bottom") -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ —Å –∫–∞—Ä–∞–æ–∫–µ-—Å—É–±—Ç–∏—Ç—Ä–∞–º–∏"""
        try:
            if not self.check_ffmpeg():
                logger.error("FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤
            temp_srt = os.path.join(self.temp_dir, f"temp_subtitles_{os.getpid()}.srt")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SRT —Ñ–∞–π–ª
            if not self._create_srt_file(subtitle_data, temp_srt):
                return False
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                video_info = self.get_video_info(video_path)
                if not video_info:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ")
                    return False
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                subtitle_filter = self.create_subtitle_filter(subtitle_data, style, position)
                
                # –ö–æ–º–∞–Ω–¥–∞ FFmpeg
                cmd = [
                    'ffmpeg', '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                    '-i', video_path,  # –í—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
                    '-vf', f"subtitles={temp_srt}:{subtitle_filter}",  # –§–∏–ª—å—Ç—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                    '-c:a', 'copy',  # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                    '-c:v', 'libx264',  # –í–∏–¥–µ–æ –∫–æ–¥–µ–∫
                    '-preset', 'medium',  # –ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏/–∫–∞—á–µ—Å—Ç–≤–∞
                    '-crf', '23',  # –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
                    output_path
                ]
                
                logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏: {output_path}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
                
                if result.returncode == 0:
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ FFmpeg: {result.stderr}")
                    return False
                    
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_srt):
                    os.remove(temp_srt)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏: {e}")
            return False
    
    def create_clip_with_subtitles(self, video_path: str, start_time: float, 
                                 end_time: float, subtitle_data: Dict,
                                 output_path: str, style: str = "modern") -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–ø —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏"""
        try:
            if not self.check_ffmpeg():
                return False
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞
            clip_subtitles = self._filter_subtitles_for_clip(
                subtitle_data, start_time, end_time
            )
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤
            temp_srt = os.path.join(self.temp_dir, f"clip_subtitles_{os.getpid()}.srt")
            
            if not self._create_srt_file(clip_subtitles, temp_srt):
                return False
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                subtitle_filter = self.create_subtitle_filter(clip_subtitles, style)
                
                # –ö–æ–º–∞–Ω–¥–∞ FFmpeg –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞
                cmd = [
                    'ffmpeg', '-y',
                    '-i', video_path,
                    '-ss', str(start_time),  # –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                    '-t', str(end_time - start_time),  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    '-vf', f"subtitles={temp_srt}:{subtitle_filter}",
                    '-c:a', 'copy',
                    '-c:v', 'libx264',
                    '-preset', 'medium',
                    '-crf', '23',
                    output_path
                ]
                
                logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–∞ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏: {start_time}-{end_time}s")
                
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=180)
                
                if result.returncode == 0:
                    logger.info(f"‚úÖ –ö–ª–∏–ø —Å–æ–∑–¥–∞–Ω: {output_path}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞: {result.stderr}")
                    return False
                    
            finally:
                if os.path.exists(temp_srt):
                    os.remove(temp_srt)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞: {e}")
            return False
    
    def _create_srt_file(self, subtitle_data: Dict, output_path: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç SRT —Ñ–∞–π–ª –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        try:
            content = ""
            
            if 'segments' in subtitle_data:
                for i, segment in enumerate(subtitle_data['segments'], 1):
                    start_time = self._format_srt_time(segment['start'])
                    end_time = self._format_srt_time(segment['end'])
                    text = segment['text'].strip()
                    
                    content += f"{i}\n"
                    content += f"{start_time} --> {end_time}\n"
                    content += f"{text}\n\n"
            
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SRT —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def _format_srt_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è SRT"""
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = seconds % 60
        milliseconds = int((secs % 1) * 1000)
        secs = int(secs)
        
        return f"{hours:02d}:{minutes:02d}:{secs:02d},{milliseconds:03d}"
    
    def _filter_subtitles_for_clip(self, subtitle_data: Dict, 
                                 start_time: float, end_time: float) -> Dict:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–ø–∞"""
        filtered_data = {
            "text": "",
            "segments": []
        }
        
        if 'segments' not in subtitle_data:
            return filtered_data
        
        for segment in subtitle_data['segments']:
            seg_start = segment['start']
            seg_end = segment['end']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ—Ç—Ä–µ–∑–∫–æ–º –∫–ª–∏–ø–∞
            if seg_end > start_time and seg_start < end_time:
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞ –∫–ª–∏–ø–∞
                new_segment = segment.copy()
                new_segment['start'] = max(0, seg_start - start_time)
                new_segment['end'] = min(end_time - start_time, seg_end - start_time)
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ —Å–ª–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'words' in new_segment and new_segment['words']:
                    new_words = []
                    for word in new_segment['words']:
                        if word['end'] > start_time and word['start'] < end_time:
                            new_word = word.copy()
                            new_word['start'] = max(0, word['start'] - start_time)
                            new_word['end'] = min(end_time - start_time, word['end'] - start_time)
                            new_words.append(new_word)
                    new_segment['words'] = new_words
                
                filtered_data['segments'].append(new_segment)
        
        return filtered_data
    
    def optimize_video_for_web(self, input_path: str, output_path: str) -> bool:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –≤–µ–±–∞"""
        try:
            cmd = [
                'ffmpeg', '-y',
                '-i', input_path,
                '-c:v', 'libx264',
                '-preset', 'fast',
                '-crf', '28',
                '-maxrate', '1M',
                '-bufsize', '2M',
                '-c:a', 'aac',
                '-b:a', '128k',
                '-movflags', '+faststart',  # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤–µ–±–∞: {output_path}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
            return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
def create_video_with_subtitles(video_path: str, subtitle_data: Dict,
                               output_path: str, style: str = "modern") -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ —Å –≤—à–∏—Ç—ã–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏"""
    processor = VideoProcessor()
    return processor.create_karaoke_video(video_path, subtitle_data, output_path, style)

def create_clip_with_karaoke(video_path: str, start_time: float, end_time: float,
                           subtitle_data: Dict, output_path: str, 
                           style: str = "modern") -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–ø —Å –∫–∞—Ä–∞–æ–∫–µ-—Å—É–±—Ç–∏—Ç—Ä–∞–º–∏"""
    processor = VideoProcessor()
    return processor.create_clip_with_subtitles(
        video_path, start_time, end_time, subtitle_data, output_path, style
    )

