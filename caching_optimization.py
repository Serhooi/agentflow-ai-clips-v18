#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ
"""
import hashlib
import json
import os
from typing import Dict, Optional

class VideoAnalysisCache:
    """–ö—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ"""
    
    def __init__(self):
        self.cache_dir = "cache"
        os.makedirs(self.cache_dir, exist_ok=True)
    
    def get_video_hash(self, video_path: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ö—ç—à –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ + –ø–µ—Ä–≤—ã–µ 1KB –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ö—ç—à–∞
            file_size = os.path.getsize(video_path)
            with open(video_path, 'rb') as f:
                first_chunk = f.read(1024)
            
            hash_data = f"{file_size}_{hashlib.md5(first_chunk).hexdigest()}"
            return hashlib.sha256(hash_data.encode()).hexdigest()[:16]
        except:
            return None
    
    def get_cached_transcript(self, video_path: str, auto_emoji: bool = False) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é"""
        video_hash = self.get_video_hash(video_path)
        if not video_hash:
            return None
        
        cache_file = os.path.join(self.cache_dir, f"transcript_{video_hash}_{auto_emoji}.json")
        
        try:
            if os.path.exists(cache_file):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞ (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
                cache_age = time.time() - os.path.getmtime(cache_file)
                if cache_age < 24 * 3600:  # 24 —á–∞—Å–∞
                    with open(cache_file, 'r', encoding='utf-8') as f:
                        logger.info(f"‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {video_hash}")
                        return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
        
        return None
    
    def cache_transcript(self, video_path: str, transcript_result: Dict, auto_emoji: bool = False):
        """–ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        video_hash = self.get_video_hash(video_path)
        if not video_hash:
            return
        
        cache_file = os.path.join(self.cache_dir, f"transcript_{video_hash}_{auto_emoji}.json")
        
        try:
            with open(cache_file, 'w', encoding='utf-8') as f:
                json.dump(transcript_result, f, ensure_ascii=False)
            logger.info(f"üíæ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: {video_hash}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {e}")
    
    def get_cached_analysis(self, transcript_text: str, video_duration: float) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ChatGPT"""
        # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        text_hash = hashlib.md5(transcript_text.encode()).hexdigest()[:16]
        cache_key = f"analysis_{text_hash}_{int(video_duration)}"
        cache_file = os.path.join(self.cache_dir, f"{cache_key}.json")
        
        try:
            if os.path.exists(cache_file):
                cache_age = time.time() - os.path.getmtime(cache_file)
                if cache_age < 12 * 3600:  # 12 —á–∞—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    with open(cache_file, 'r', encoding='utf-8') as f:
                        logger.info(f"‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {cache_key}")
                        return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        return None
    
    def cache_analysis(self, transcript_text: str, video_duration: float, analysis_result: Dict):
        """–ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ ChatGPT"""
        text_hash = hashlib.md5(transcript_text.encode()).hexdigest()[:16]
        cache_key = f"analysis_{text_hash}_{int(video_duration)}"
        cache_file = os.path.join(self.cache_dir, f"{cache_key}.json")
        
        try:
            with open(cache_file, 'w', encoding='utf-8') as f:
                json.dump(analysis_result, f, ensure_ascii=False)
            logger.info(f"üíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: {cache_key}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def cleanup_old_cache(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–π –∫—ç—à"""
        try:
            current_time = time.time()
            cleaned = 0
            
            for filename in os.listdir(self.cache_dir):
                file_path = os.path.join(self.cache_dir, filename)
                if os.path.isfile(file_path):
                    file_age = current_time - os.path.getmtime(file_path)
                    if file_age > 48 * 3600:  # –°—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤
                        os.remove(file_path)
                        cleaned += 1
            
            if cleaned > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
video_cache = VideoAnalysisCache()

def safe_transcribe_audio_cached(audio_path: str, video_path: str, auto_emoji: bool = False, video_duration: float = 60.0) -> Optional[Dict]:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_result = video_cache.get_cached_transcript(video_path, auto_emoji)
    if cached_result:
        return cached_result
    
    # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    result = safe_transcribe_audio(audio_path, auto_emoji, video_duration)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    if result:
        video_cache.cache_transcript(video_path, result, auto_emoji)
    
    return result

def analyze_with_chatgpt_cached(transcript_text: str, video_duration: float) -> Optional[Dict]:
    """–ê–Ω–∞–ª–∏–∑ ChatGPT —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_result = video_cache.get_cached_analysis(transcript_text, video_duration)
    if cached_result:
        return cached_result
    
    # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    result = analyze_with_chatgpt(transcript_text, video_duration)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    if result:
        video_cache.cache_analysis(transcript_text, video_duration, result)
    
    return result