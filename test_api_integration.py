#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API —Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π —ç–º–æ–¥–∂–∏
"""

def test_analyze_request_model():
    """–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ AnalyzeRequest"""
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏
        class AnalyzeRequest:
            def __init__(self, video_id: str, autoEmoji: bool = False):
                self.video_id = video_id
                self.autoEmoji = autoEmoji
        
        # –¢–µ—Å—Ç 1: –ë–µ–∑ —ç–º–æ–¥–∂–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        request1 = AnalyzeRequest("test-video-id")
        assert request1.video_id == "test-video-id"
        assert request1.autoEmoji == False
        print("‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: AnalyzeRequest –±–µ–∑ autoEmoji")
        
        # –¢–µ—Å—Ç 2: –° —ç–º–æ–¥–∂–∏
        request2 = AnalyzeRequest("test-video-id", True)
        assert request2.video_id == "test-video-id"
        assert request2.autoEmoji == True
        print("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: AnalyzeRequest —Å autoEmoji=True")
        
        # –¢–µ—Å—Ç 3: –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∂–∏
        request3 = AnalyzeRequest("test-video-id", False)
        assert request3.video_id == "test-video-id"
        assert request3.autoEmoji == False
        print("‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: AnalyzeRequest —Å autoEmoji=False")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–æ–¥–µ–ª–∏: {e}")
        return False

def test_safe_transcribe_audio_signature():
    """–¢–µ—Å—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏ safe_transcribe_audio"""
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –Ω–æ–≤–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π
        def safe_transcribe_audio(audio_path: str, auto_emoji: bool = False, video_duration: float = 60.0):
            return {
                "audio_path": audio_path,
                "auto_emoji": auto_emoji,
                "video_duration": video_duration,
                "words": []
            }
        
        # –¢–µ—Å—Ç 1: –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –≤—ã–∑–æ–≤–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        result1 = safe_transcribe_audio("test.wav")
        assert result1["auto_emoji"] == False
        assert result1["video_duration"] == 60.0
        print("‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
        
        # –¢–µ—Å—Ç 2: –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± —Å —ç–º–æ–¥–∂–∏
        result2 = safe_transcribe_audio("test.wav", True, 120.0)
        assert result2["auto_emoji"] == True
        assert result2["video_duration"] == 120.0
        print("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –ù–æ–≤–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ —Å —ç–º–æ–¥–∂–∏")
        
        # –¢–µ—Å—Ç 3: –ß–∞—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        result3 = safe_transcribe_audio("test.wav", auto_emoji=True)
        assert result3["auto_emoji"] == True
        assert result3["video_duration"] == 60.0
        print("‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –ß–∞—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã: {e}")
        return False

def test_emoji_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∂–∏"""
    try:
        # –¢–µ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–º–æ–¥–∂–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        test_cases = [
            (10, 2),   # –ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ - –º–∏–Ω–∏–º—É–º 2
            (30, 2),   # 30 —Å–µ–∫—É–Ω–¥ - 2 —ç–º–æ–¥–∂–∏
            (60, 2),   # 60 —Å–µ–∫—É–Ω–¥ - 2 —ç–º–æ–¥–∂–∏  
            (90, 3),   # 90 —Å–µ–∫—É–Ω–¥ - 3 —ç–º–æ–¥–∂–∏
            (120, 4),  # 120 —Å–µ–∫—É–Ω–¥ - 4 —ç–º–æ–¥–∂–∏
            (300, 4),  # –î–ª–∏–Ω–Ω–æ–µ –≤–∏–¥–µ–æ - –º–∞–∫—Å–∏–º—É–º 4
        ]
        
        for duration, expected_count in test_cases:
            actual_count = min(4, max(2, int(duration / 30)))
            assert actual_count == expected_count, f"–î–ª—è {duration}—Å –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count}, –ø–æ–ª—É—á–µ–Ω–æ {actual_count}"
        
        print("‚úÖ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–º–æ–¥–∂–∏ –ø—Ä–æ–π–¥–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ª–æ–≥–∏–∫–∏ —ç–º–æ–¥–∂–∏: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API...")
    
    tests = [
        test_analyze_request_model,
        test_safe_transcribe_audio_signature,
        test_emoji_logic
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        print(f"\n--- {test.__name__} ---")
        if test():
            passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")