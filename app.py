# AgentFlow AI Clips v18.6.0 - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑ Remotion
import os
import json
import uuid
import asyncio
import logging
import subprocess
import tempfile
from datetime import datetime
from typing import Dict, List, Optional, Any
import psutil
import shutil

from fastapi import FastAPI, File, UploadFile, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from pydantic import BaseModel
import openai
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ü–ï–†–í–´–ú –î–ï–õ–û–ú!)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("app")

# Supabase Storage –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    from supabase import create_client, Client
    SUPABASE_AVAILABLE = True
except ImportError:
    SUPABASE_AVAILABLE = False
    logger.warning("Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    import redis
    redis_client = redis.from_url(
        os.getenv("REDIS_URL", "redis://localhost:6379/0"),
        decode_responses=True
    )
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    redis_client.ping()
    REDIS_AVAILABLE = True
    logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
except Exception as e:
    REDIS_AVAILABLE = False
    redis_client = None
    logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(
    title="AgentFlow AI Clips API",
    description="–°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–æ–≤ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏",
    version="18.6.0"
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è 512MB RAM
class Config:
    UPLOAD_DIR = "uploads"
    AUDIO_DIR = "audio"
    CLIPS_DIR = "clips"
    MAX_FILE_SIZE = int(os.getenv("MAX_FILE_SIZE_MB", "250")) * 1024 * 1024  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ª–∏–º–∏—Ç
    MAX_TASK_AGE = 4 * 60 * 60  # 4 —á–∞—Å–∞ (–¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ)
    CLEANUP_INTERVAL = 600  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    MAX_MEMORY_USAGE = 600 * 1024 * 1024  # 600MB –ª–∏–º–∏—Ç (–¥–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ)
    MAX_CONCURRENT_TASKS = 2  # –ú–∞–∫—Å–∏–º—É–º 2 –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    CLIP_MIN_DURATION = int(os.getenv("CLIP_MIN_DURATION", "40"))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–ø–æ–≤
    CLIP_MAX_DURATION = int(os.getenv("CLIP_MAX_DURATION", "80"))  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–ø–æ–≤
    FFMPEG_TIMEOUT_MULTIPLIER = int(os.getenv("FFMPEG_TIMEOUT_MULTIPLIER", "4"))  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è ffmpeg

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
for directory in [Config.UPLOAD_DIR, Config.AUDIO_DIR, Config.CLIPS_DIR]:
    os.makedirs(directory, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
analysis_tasks = {}
generation_tasks = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("OPENAI_API_KEY –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

client = OpenAI(api_key=openai_api_key)
logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase = None
service_supabase = None
SUPABASE_BUCKET = "video-results"

def init_supabase():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    global supabase, service_supabase
    if not SUPABASE_AVAILABLE:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    try:
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_anon_key = os.getenv("SUPABASE_ANON_KEY")
        supabase_service_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
        if not all([supabase_url, supabase_anon_key, supabase_service_key]):
            logger.warning("‚ö†Ô∏è –ù–µ –≤—Å–µ Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        supabase = create_client(supabase_url, supabase_anon_key)
        service_supabase = create_client(supabase_url, supabase_service_key)
        logger.info("‚úÖ Supabase Storage –ø–æ–¥–∫–ª—é—á–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return False

supabase_available = init_supabase()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏
def get_memory_usage() -> Dict[str, int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏"""
    try:
        memory = psutil.virtual_memory()
        process = psutil.Process()
        return {
            "total_mb": memory.total // (1024 * 1024),
            "available_mb": memory.available // (1024 * 1024),
            "used_mb": memory.used // (1024 * 1024),
            "process_mb": process.memory_info().rss // (1024 * 1024),
            "percent": memory.percent
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: {e}")
        return {"total_mb": 512, "available_mb": 100, "used_mb": 412, "process_mb": 50, "percent": 80}

def check_memory_limit() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏"""
    try:
        memory_info = get_memory_usage()
        if memory_info["process_mb"] > (Config.MAX_MEMORY_USAGE // (1024 * 1024)):
            logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {memory_info['process_mb']}MB")
            return False
        return True
    except Exception:
        return True

def cleanup_old_files():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞"""
    try:
        current_time = datetime.now()
        cleaned_count = 0
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–∏–¥–µ–æ
        for filename in os.listdir(Config.UPLOAD_DIR):
            file_path = os.path.join(Config.UPLOAD_DIR, filename)
            if os.path.isfile(file_path):
                file_time = datetime.fromtimestamp(os.path.getctime(file_path))
                if (current_time - file_time).seconds > Config.MAX_TASK_AGE:
                    os.remove(file_path)
                    cleaned_count += 1
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
        for filename in os.listdir(Config.AUDIO_DIR):
            file_path = os.path.join(Config.AUDIO_DIR, filename)
            if os.path.isfile(file_path):
                file_time = datetime.fromtimestamp(os.path.getctime(file_path))
                if (current_time - file_time).seconds > Config.MAX_TASK_AGE:
                    os.remove(file_path)
                    cleaned_count += 1
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–ª–∏–ø–æ–≤
        for filename in os.listdir(Config.CLIPS_DIR):
            file_path = os.path.join(Config.CLIPS_DIR, filename)
            if os.path.isfile(file_path):
                file_time = datetime.fromtimestamp(os.path.getctime(file_path))
                if (current_time - file_time).seconds > Config.MAX_TASK_AGE:
                    os.remove(file_path)
                    cleaned_count += 1
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –∏–∑ –ø–∞–º—è—Ç–∏
        tasks_to_remove = []
        for task_id, task in analysis_tasks.items():
            task_age = (current_time - task["created_at"]).seconds
            if task_age > Config.MAX_TASK_AGE:
                tasks_to_remove.append(task_id)
        
        for task_id in tasks_to_remove:
            del analysis_tasks[task_id]
            cleaned_count += 1
        
        if cleaned_count > 0:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤/–∑–∞–¥–∞—á")
        
        return cleaned_count
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        return 0

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "name": "AgentFlow AI Clips API",
        "version": "18.6.0",
        "status": "running",
        "description": "–°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–æ–≤ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏",
        "endpoints": {
            "upload": "/api/videos/upload",
            "analyze": "/api/videos/analyze", 
            "health": "/health",
            "stats": "/api/system/stats",
            "docs": "/docs"
        },
        "memory_optimized": "512MB RAM",
        "redis_available": REDIS_AVAILABLE
    }

# –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        memory_info = get_memory_usage()
        active_tasks = get_active_tasks_count()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ffmpeg
        ffmpeg_available = True
        try:
            subprocess.run(["ffmpeg", "-version"], capture_output=True, check=True, timeout=5)
        except:
            ffmpeg_available = False
        
        return {
            "status": "healthy",
            "memory": memory_info,
            "active_tasks": active_tasks,
            "max_concurrent_tasks": Config.MAX_CONCURRENT_TASKS,
            "ffmpeg_available": ffmpeg_available,
            "supabase_available": supabase_available,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.get("/api/system/stats")
async def get_system_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        memory_info = get_memory_usage()
        active_tasks = get_active_tasks_count()
        
        # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–∞—Ö
        upload_files = len([f for f in os.listdir(Config.UPLOAD_DIR) if os.path.isfile(os.path.join(Config.UPLOAD_DIR, f))])
        audio_files = len([f for f in os.listdir(Config.AUDIO_DIR) if os.path.isfile(os.path.join(Config.AUDIO_DIR, f))])
        clip_files = len([f for f in os.listdir(Config.CLIPS_DIR) if os.path.isfile(os.path.join(Config.CLIPS_DIR, f))])
        
        return {
            "memory": memory_info,
            "tasks": {
                "active": active_tasks,
                "total": len(analysis_tasks),
                "max_concurrent": Config.MAX_CONCURRENT_TASKS
            },
            "files": {
                "uploads": upload_files,
                "audio": audio_files,
                "clips": clip_files
            },
            "config": {
                "max_file_size_mb": Config.MAX_FILE_SIZE // (1024 * 1024),
                "max_memory_mb": Config.MAX_MEMORY_USAGE // (1024 * 1024),
                "cleanup_interval_min": Config.CLEANUP_INTERVAL // 60,
                "max_task_age_hours": Config.MAX_TASK_AGE // 3600
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/system/cleanup")
async def manual_cleanup():
    """–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        cleaned_count = cleanup_old_files()
        memory_info = get_memory_usage()
        
        return {
            "cleaned_files": cleaned_count,
            "memory_after_cleanup": memory_info,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/system/queue-stats")
async def get_queue_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á"""
    try:
        queue_stats = hybrid_queue.get_queue_stats()
        memory_info = get_memory_usage()
        active_tasks = get_active_tasks_count()
        
        return {
            "queue": queue_stats,
            "memory": memory_info,
            "active_tasks": active_tasks,
            "redis_available": REDIS_AVAILABLE,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

def get_active_tasks_count() -> int:
    """–ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
    active_count = 0
    for task in analysis_tasks.values():
        if task["status"] == "processing":
            active_count += 1
    return active_count

# –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å Redis –∏ –±–µ–∑ –Ω–µ–≥–æ)
class HybridTaskQueue:
    """–ì–∏–±—Ä–∏–¥–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á - Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ –ø–∞–º—è—Ç—å"""
    
    def __init__(self):
        self.queue_name = "video_processing_queue"
        self.processing_set = "processing_tasks"
        self.results_prefix = "task_result:"
        self.memory_queue = []  # Fallback –æ—á–µ—Ä–µ–¥—å –≤ –ø–∞–º—è—Ç–∏
        self.memory_processing = set()  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –∑–∞–¥–∞—á–∏
        self.memory_results = {}  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–º—è—Ç–∏
    
    def add_task(self, task_data: Dict) -> str:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å"""
        task_id = str(uuid.uuid4())
        task_data["task_id"] = task_id
        task_data["created_at"] = datetime.now().isoformat()
        
        if REDIS_AVAILABLE:
            try:
                redis_client.lpush(self.queue_name, json.dumps(task_data))
                logger.info(f"üìù –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Redis –æ—á–µ—Ä–µ–¥—å: {task_id}")
                return task_id
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å: {e}")
        
        # Fallback –≤ –ø–∞–º—è—Ç—å
        self.memory_queue.append(task_data)
        logger.info(f"üìù –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å: {task_id}")
        return task_id
    
    def get_task(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        if REDIS_AVAILABLE:
            try:
                result = redis_client.brpop(self.queue_name, timeout=1)
                if result:
                    task_data = json.loads(result[1])
                    redis_client.sadd(self.processing_set, task_data["task_id"])
                    return task_data
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
        
        # Fallback –≤ –ø–∞–º—è—Ç—å
        if self.memory_queue:
            task_data = self.memory_queue.pop(0)
            self.memory_processing.add(task_data["task_id"])
            return task_data
        
        return None
    
    def complete_task(self, task_id: str, result: Dict):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"""
        if REDIS_AVAILABLE:
            try:
                redis_client.setex(f"{self.results_prefix}{task_id}", 3600, json.dumps(result))
                redis_client.srem(self.processing_set, task_id)
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ Redis: {task_id}")
                return
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
        
        # Fallback –≤ –ø–∞–º—è—Ç—å
        self.memory_results[task_id] = result
        self.memory_processing.discard(task_id)
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏: {task_id}")
    
    def get_task_result(self, task_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏"""
        if REDIS_AVAILABLE:
            try:
                result = redis_client.get(f"{self.results_prefix}{task_id}")
                if result:
                    return json.loads(result)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
        
        # Fallback –≤ –ø–∞–º—è—Ç—å
        return self.memory_results.get(task_id)
    
    def get_queue_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏"""
        if REDIS_AVAILABLE:
            try:
                return {
                    "queue_length": redis_client.llen(self.queue_name),
                    "processing": redis_client.scard(self.processing_set),
                    "redis_available": True,
                    "mode": "redis"
                }
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
        
        # Fallback –≤ –ø–∞–º—è—Ç—å
        return {
            "queue_length": len(self.memory_queue),
            "processing": len(self.memory_processing),
            "redis_available": False,
            "mode": "memory"
        }

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
hybrid_queue = HybridTaskQueue()

# Pydantic –º–æ–¥–µ–ª–∏
class VideoAnalysisRequest(BaseModel):
    video_id: str

class ClipGenerationRequest(BaseModel):
    video_id: str
    format_id: str

class VideoInfo(BaseModel):
    id: str
    filename: str
    duration: float
    size: int
    status: str
    upload_time: str

class ClipInfo(BaseModel):
    id: str
    video_id: str
    format_id: str
    status: str
    progress: int
    current_stage: Optional[str] = None
    stage_progress: Optional[int] = None

def upload_clip_to_supabase(local_path: str, filename: str) -> str:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–ø–∞ –≤ Supabase Storage"""
    if not supabase_available or not service_supabase:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å")
        return f"/api/clips/download/{filename}"
    try:
        with open(local_path, "rb") as clip_file:
            storage_path = f"clips/{datetime.now().strftime('%Y%m%d')}/{filename}"
            response = service_supabase.storage.from_(SUPABASE_BUCKET).upload(
                storage_path, clip_file, {"content-type": "video/mp4"}
            )
            if response:
                public_url = service_supabase.storage.from_(SUPABASE_BUCKET).get_public_url(storage_path)
                logger.info(f"‚úÖ –ö–ª–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase: {public_url}")
                return public_url
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase: {e}")
    logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ")
    return f"/api/clips/download/{filename}"

def get_video_duration(video_path: str) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
    try:
        cmd = ['ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', video_path]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        data = json.loads(result.stdout)
        return float(data['format']['duration'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ: {e}")
        return 60.0  # Fallback

def extract_audio(video_path: str, audio_path: str) -> bool:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è 512MB RAM)"""
    try:
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        cmd = [
            'ffmpeg', '-i', video_path, 
            '-vn',  # –ë–µ–∑ –≤–∏–¥–µ–æ
            '-acodec', 'mp3', 
            '-ar', '16000',  # –ù–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
            '-ac', '1',  # –ú–æ–Ω–æ
            '-ab', '64k',  # –ù–∏–∑–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            '-threads', '1',  # –û–¥–∏–Ω –ø–æ—Ç–æ–∫ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            '-y', audio_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True, timeout=300)
        return os.path.exists(audio_path)
    except subprocess.TimeoutExpired:
        logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        return False

def safe_transcribe_audio(audio_path: str) -> Optional[Dict]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å—Ç–∞–≤–Ω—ã—Ö —Å–ª–æ–≤"""
    try:
        with open(audio_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="verbose_json",
                timestamp_granularities=["word"],
                # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤—Å—Ç–∞–≤–Ω—ã—Ö —Å–ª–æ–≤ –∏ –º–µ–∂–¥–æ–º–µ—Ç–∏–π
                prompt="Transcribe everything including all filler words, hesitations, and interjections: um, uh, ah, oh, hmm, yeah, yep, yes, no, like, you know, I mean, so, well, actually, basically, literally, right, okay, alright, wow, hey, man, dude, guys, folks, people, anyway, whatever, honestly, seriously, obviously, definitely, probably, maybe, perhaps, indeed, certainly, absolutely, exactly, totally, completely, really, very, quite, just, only, even, still, already, yet, now, then, here, there, this, that, these, those."
            )
            result = transcript.model_dump() if hasattr(transcript, 'model_dump') else dict(transcript)
            
            # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤—Å—Ç–∞–≤–Ω—ã—Ö —Å–ª–æ–≤
            if 'words' in result:
                result['words'] = enhance_filler_words(result['words'])
            
            return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        return None

def enhance_filler_words(words: List[Dict]) -> List[Dict]:
    """–£–ª—É—á—à–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–Ω—ã—Ö —Å–ª–æ–≤ –∏ –º–µ–∂–¥–æ–º–µ—Ç–∏–π"""
    enhanced_words = []
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –≤—Å—Ç–∞–≤–Ω—ã—Ö —Å–ª–æ–≤
    filler_corrections = {
        'um': ['uhm', 'umm', 'uum', 'em'],
        'uh': ['uhh', 'uuh', 'ah'],
        'yeah': ['yah', 'yea', 'ye'],
        'like': ['lyk', 'lik'],
        'you know': ['ya know', 'y\'know', 'yknow'],
        'so': ['soo', 'sooo'],
        'well': ['wel', 'wll'],
        'actually': ['actualy', 'acually'],
        'basically': ['basicaly', 'basicly'],
        'literally': ['literaly', 'literaly'],
        'right': ['rite', 'rght'],
        'okay': ['ok', 'okk', 'okey'],
        'alright': ['aright', 'alrite', 'all right'],
        'hmm': ['hm', 'hmm', 'hmmm'],
        'oh': ['ooh', 'ohh'],
        'wow': ['woow', 'wooow'],
        'hey': ['hei', 'heyy'],
        'man': ['mn'],
        'dude': ['dud'],
        'guys': ['gys'],
        'folks': ['folx'],
        'people': ['ppl', 'peple']
    }
    
    for word in words:
        word_text = word.get('word', '').strip().lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
        corrected = False
        for correct_word, variations in filler_corrections.items():
            if word_text in variations:
                word['word'] = correct_word
                corrected = True
                break
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        enhanced_words.append(word)
    
    logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(enhanced_words)} —Å–ª–æ–≤, –≤–∫–ª—é—á–∞—è –≤—Å—Ç–∞–≤–Ω—ã–µ —Å–ª–æ–≤–∞")
    return enhanced_words

def analyze_content_type(transcript_text: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–ø–æ–≤"""
    text_lower = transcript_text.lower()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    educational_keywords = ['learn', 'teach', 'explain', 'understand', 'knowledge', 'study', 'lesson', 'course', 'tutorial', 'guide', 'how to', 'step by step', 'method', 'technique', 'process', 'theory', 'concept', 'principle', 'definition', 'example']
    entertainment_keywords = ['funny', 'hilarious', 'joke', 'laugh', 'comedy', 'entertainment', 'fun', 'amusing', 'humor', 'story', 'adventure', 'exciting', 'amazing', 'incredible', 'unbelievable', 'crazy', 'wild', 'epic', 'awesome', 'fantastic']
    business_keywords = ['business', 'money', 'profit', 'investment', 'strategy', 'marketing', 'sales', 'growth', 'success', 'entrepreneur', 'startup', 'company', 'market', 'customer', 'revenue', 'finance', 'economy', 'industry', 'competition', 'opportunity']
    personal_keywords = ['life', 'experience', 'personal', 'journey', 'story', 'challenge', 'overcome', 'struggle', 'achievement', 'goal', 'dream', 'motivation', 'inspiration', 'advice', 'wisdom', 'lesson learned', 'mistake', 'failure', 'success', 'growth']
    tech_keywords = ['technology', 'software', 'app', 'digital', 'internet', 'computer', 'programming', 'code', 'development', 'innovation', 'artificial intelligence', 'ai', 'machine learning', 'data', 'algorithm', 'system', 'platform', 'tool', 'feature', 'update']
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    educational_score = sum(1 for keyword in educational_keywords if keyword in text_lower)
    entertainment_score = sum(1 for keyword in entertainment_keywords if keyword in text_lower)
    business_score = sum(1 for keyword in business_keywords if keyword in text_lower)
    personal_score = sum(1 for keyword in personal_keywords if keyword in text_lower)
    tech_score = sum(1 for keyword in tech_keywords if keyword in text_lower)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    scores = {
        'educational': educational_score,
        'entertainment': entertainment_score,
        'business': business_score,
        'personal': personal_score,
        'tech': tech_score
    }
    
    content_type = max(scores, key=scores.get)
    logger.info(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type} (score: {scores[content_type]})")
    
    return content_type

def calculate_clip_quality_score(highlight: Dict, transcript_text: str) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –∫–ª–∏–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
    score = 0.0
    
    # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 45-60 —Å–µ–∫—É–Ω–¥)
    duration = highlight.get("duration", highlight["end_time"] - highlight["start_time"])
    if 45 <= duration <= 60:
        score += 2.0
    elif 30 <= duration <= 75:
        score += 1.5
    else:
        score += 1.0
    
    # –û—Ü–µ–Ω–∫–∞ –∑–∞ –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
    viral_potential = highlight.get("viral_potential", "medium").lower()
    viral_scores = {"high": 3.0, "medium": 2.0, "low": 1.0}
    score += viral_scores.get(viral_potential, 2.0)
    
    # –û—Ü–µ–Ω–∫–∞ –∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    emotion = highlight.get("emotion", "neutral").lower()
    emotion_scores = {
        "surprise": 3.0, "excitement": 3.0, "humor": 3.0,
        "inspiration": 2.5, "curiosity": 2.5,
        "interest": 2.0, "neutral": 1.0
    }
    score += emotion_scores.get(emotion, 1.0)
    
    # –û—Ü–µ–Ω–∫–∞ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–¥–ª–∏–Ω–∞ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)
    title = highlight.get("title", "")
    if len(title) > 10 and any(word in title.lower() for word in ["–∫–∞–∫", "–ø–æ—á–µ–º—É", "—Å–µ–∫—Ä–µ—Ç", "–ª—É—á—à–∏–π", "—Ç–æ–ø", "–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ", "—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ"]):
        score += 1.5
    elif len(title) > 5:
        score += 1.0
    
    # –û—Ü–µ–Ω–∫–∞ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    keywords = highlight.get("keywords", [])
    score += min(len(keywords) * 0.3, 1.5)
    
    # –û—Ü–µ–Ω–∫–∞ –∑–∞ –Ω–∞–ª–∏—á–∏–µ —Ö—É–∫–∞ –∏ –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–∏
    if highlight.get("hook") and len(highlight.get("hook", "")) > 10:
        score += 1.0
    if highlight.get("climax") and len(highlight.get("climax", "")) > 10:
        score += 1.0
    
    return round(score, 2)

def analyze_with_chatgpt(transcript_text: str, video_duration: float) -> Optional[Dict]:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –ø–æ–∏—Å–∫–∞ –∫–ª–∏–ø–æ–≤"""
    try:
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–ø–æ–≤
        if video_duration <= 30:
            target_clips = 2
        elif video_duration <= 60:
            target_clips = 3
        elif video_duration <= 300:  # 5 –º–∏–Ω—É—Ç
            target_clips = 4
        elif video_duration <= 600:  # 10 –º–∏–Ω—É—Ç
            target_clips = 5
        elif video_duration <= 1200:  # 20 –º–∏–Ω—É—Ç
            target_clips = 6
        elif video_duration <= 1800:  # 30 –º–∏–Ω—É—Ç
            target_clips = 7
        else:  # –ë–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç
            target_clips = 8
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–∏–¥–µ–æ
        content_type = analyze_content_type(transcript_text)
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_strategies = {
            'educational': """
–°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê:
- –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∫–µ–π—Å—ã
- –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –í–∞–∂–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∑—é–º–µ
- –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
""",
            'entertainment': """
–°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø –†–ê–ó–í–õ–ï–ö–ê–¢–ï–õ–¨–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê:
- –°–∞–º—ã–µ —Å–º–µ—à–Ω—ã–µ –∏ —è—Ä–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã
- –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã –∏ —Å—é—Ä–ø—Ä–∏–∑—ã
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∏–∫–∏ (—Å–º–µ—Ö, —É–¥–∏–≤–ª–µ–Ω–∏–µ, –≤–æ—Å—Ç–æ—Ä–≥)
- –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–µ–π
- –ó–∞–±–∞–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
- –ú–æ–º–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–π
""",
            'business': """
–°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø –ë–ò–ó–ù–ï–°-–ö–û–ù–¢–ï–ù–¢–ê:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
- –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—Ö–∞ –∏ –Ω–µ—É–¥–∞—á
- –¶–∏—Ñ—Ä—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
- –ò–Ω—Å–∞–π—Ç—ã –∏ –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏—è
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
""",
            'personal': """
–°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø –õ–ò–ß–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê:
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è
- –ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ –º—É–¥—Ä–æ—Å—Ç—å
- –ú–æ–º–µ–Ω—Ç—ã –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π
- –õ–∏—á–Ω—ã–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏—è –∏ –∏–Ω—Å–∞–π—Ç—ã
- –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –º–æ–º–µ–Ω—Ç—ã
- –ò—Å–∫—Ä–µ–Ω–Ω–∏–µ —ç–º–æ—Ü–∏–∏ –∏ —á—É–≤—Å—Ç–≤–∞
""",
            'tech': """
–°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø –¢–ï–•–ù–ò–ß–ï–°–ö–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê:
- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
- –û–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
- –°—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –æ–±–∑–æ—Ä—ã
- –†–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏
- –ë—É–¥—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã
"""
        }
        
        strategy = content_strategies.get(content_type, content_strategies['personal'])
        
        prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {video_duration:.1f} —Å–µ–∫—É–Ω–¥ –∏ –Ω–∞–π–¥–∏ {target_clips} –°–ê–ú–´–• –¶–ï–ü–õ–Ø–Æ–©–ò–• –º–æ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª–∏–ø–æ–≤.

–¢–ò–ü –ö–û–ù–¢–ï–ù–¢–ê: {content_type.upper()}
{strategy}

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–†–ò–¢–ï–†–ò–ò –û–¢–ë–û–†–ê:
- –ú–æ–º–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å—é
- –ö–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ –∫–æ–Ω—Ü–∞
- –§—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—Ç—Å—è –ø—Ä–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å
- –ú–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç —Ä–µ–∞–∫—Ü–∏—é (—É–¥–∏–≤–ª–µ–Ω–∏–µ, —Å–º–µ—Ö, —Å–æ–≥–ª–∞—Å–∏–µ)
- –ö–æ–Ω—Ç–µ–Ω—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π (TikTok, Instagram, YouTube Shorts)

–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {transcript_text}

–ö–†–ò–¢–ï–†–ò–ò –û–¢–ë–û–†–ê –ö–õ–ò–ü–û–í:
1. –í–ò–†–£–°–ù–´–ô –ü–û–¢–ï–ù–¶–ò–ê–õ: –í—ã–±–∏—Ä–∞–π –º–æ–º–µ–Ω—Ç—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è —Ä–µ–ø–æ—Å—Ç–æ–≤ –∏ –ª–∞–π–∫–æ–≤
2. HOOK FACTOR: –ü–µ—Ä–≤—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ
3. –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ü–ò–ö–ê: –ò—â–∏ –º–æ–º–µ–Ω—Ç—ã –ø–∏–∫–æ–≤—ã—Ö —ç–º–æ—Ü–∏–π (—Å–º–µ—Ö, —É–¥–∏–≤–ª–µ–Ω–∏–µ, –∏–Ω—Å–∞–π—Ç)
4. –ó–ê–í–ï–†–®–ï–ù–ù–û–°–¢–¨: –ö–∞–∂–¥—ã–π –∫–ª–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
5. –¶–ò–¢–ò–†–£–ï–ú–û–°–¢–¨: –§—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –ª—é–¥–∏ –∑–∞—Ö–æ—Ç—è—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –°–æ–∑–¥–∞–π –†–û–í–ù–û {target_clips} –∫–ª–∏–ø–æ–≤
2. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {Config.CLIP_MIN_DURATION}-{Config.CLIP_MAX_DURATION} —Å–µ–∫—É–Ω–¥ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 45-60 —Å–µ–∫)
3. –ö–ª–∏–ø—ã –ù–ï –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
4. –í—Ä–µ–º—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0-{video_duration:.1f} —Å–µ–∫—É–Ω–¥
5. –ù–∞—á–∏–Ω–∞–π –∫–ª–∏–ø —Å —Å–∏–ª—å–Ω–æ–≥–æ —Ö—É–∫–∞, –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –Ω–∞ –ø–∏–∫–µ –∏–ª–∏ –≤—ã–≤–æ–¥–µ
6. –ò–∑–±–µ–≥–∞–π –∫–ª–∏–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –ø–æ—Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "highlights": [
        {{
            "start_time": 0,
            "end_time": 55,
            "title": "–¶–µ–ø–ª—è—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π",
            "description": "–ü–æ—á–µ–º—É —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –∑–∞—Ü–µ–ø–∏—Ç –∑—Ä–∏—Ç–µ–ª—è –∏ –∑–∞—Å—Ç–∞–≤–∏—Ç –¥–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
            "hook": "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤ –ø–µ—Ä–≤—ã—Ö —Å–µ–∫—É–Ω–¥–∞—Ö –ø—Ä–∏–≤–ª–µ—á–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ",
            "climax": "–ö—É–ª—å–º–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–ª–∏–ø–∞",
            "viral_potential": "high",
            "emotion": "surprise",
            "keywords": ["–∫–ª—é—á–µ–≤–æ–µ", "—Å–ª–æ–≤–æ", "—Ö–µ—à—Ç–µ–≥"],
            "best_for": ["tiktok", "instagram", "youtube_shorts"]
        }}
    ]
}}
"""
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1500,
            temperature=0.7
        )
        content = response.choices[0].message.content.strip()
        if content.startswith('```json'):
            content = content[7:]
        if content.endswith('```'):
            content = content[:-3]
        content = content.strip()
        try:
            result = json.loads(content)
            highlights = result.get("highlights", [])
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–ª–∏–ø–æ–≤
            optimized_highlights = []
            for i, highlight in enumerate(highlights):
                duration = highlight["end_time"] - highlight["start_time"]
                
                # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if duration < Config.CLIP_MIN_DURATION:
                    highlight["end_time"] = min(highlight["start_time"] + Config.CLIP_MIN_DURATION, video_duration)
                elif duration > Config.CLIP_MAX_DURATION:
                    highlight["end_time"] = highlight["start_time"] + Config.CLIP_MAX_DURATION
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                highlight["quality_score"] = calculate_clip_quality_score(highlight, transcript_text)
                highlight["duration"] = highlight["end_time"] - highlight["start_time"]
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
                highlight.setdefault("viral_potential", "medium")
                highlight.setdefault("emotion", "neutral")
                highlight.setdefault("hook", highlight.get("title", ""))
                highlight.setdefault("climax", highlight.get("description", ""))
                highlight.setdefault("best_for", ["youtube_shorts", "tiktok"])
                
                optimized_highlights.append(highlight)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ
            optimized_highlights.sort(key=lambda x: x.get("quality_score", 0), reverse=True)
            highlights = optimized_highlights
                    
            if len(highlights) < target_clips:
                logger.warning(f"ChatGPT –≤–µ—Ä–Ω—É–ª {len(highlights)} –∫–ª–∏–ø–æ–≤ –≤–º–µ—Å—Ç–æ {target_clips}")
                last_end = highlights[-1]["end_time"] if highlights else 0
                while len(highlights) < target_clips and last_end + Config.CLIP_MIN_DURATION <= video_duration:
                    clip_duration = min(Config.CLIP_MAX_DURATION, video_duration - last_end - 5)
                    highlights.append({
                        "start_time": last_end + 5,
                        "end_time": min(last_end + clip_duration, video_duration),
                        "title": f"–ö–ª–∏–ø {len(highlights) + 1}",
                        "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–ø",
                        "keywords": []
                    })
                    last_end = highlights[-1]["end_time"]
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            avg_quality = sum(h.get("quality_score", 0) for h in highlights) / len(highlights) if highlights else 0
            high_quality_clips = sum(1 for h in highlights if h.get("quality_score", 0) >= 7.0)
            
            logger.info(f"üéØ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(highlights)} –∫–ª–∏–ø–æ–≤, —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_quality:.1f}, –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {high_quality_clips}")
            
            return {"highlights": highlights}
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return create_fallback_highlights(video_duration, target_clips)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å ChatGPT: {e}")
        return create_fallback_highlights(video_duration, 3)

def create_fallback_highlights(video_duration: float, target_clips: int) -> Dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ fallback –∫–ª–∏–ø–æ–≤"""
    highlights = []
    clip_duration = (Config.CLIP_MIN_DURATION + Config.CLIP_MAX_DURATION) // 2  # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    gap = 5  # –ë–æ–ª—å—à–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –∫–ª–∏–ø–∞–º–∏
    for i in range(target_clips):
        start = i * (clip_duration + gap)
        end = start + clip_duration
        if end > video_duration:
            end = video_duration
            start = max(0, end - clip_duration)
        if start >= video_duration - 5:
            break
        highlights.append({
            "start_time": start,
            "end_time": end,
            "title": f"–ö–ª–∏–ø {i+1}",
            "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª–∏–ø",
            "keywords": []
        })
    return {"highlights": highlights}

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class VideoUploadResponse(BaseModel):
    video_id: str
    filename: str
    size: int
    duration: float

class AnalyzeRequest(BaseModel):
    video_id: str

class ClipGenerateRequest(BaseModel):
    video_id: str
    format_id: str = "9x16"  # 9x16, 16x9, 1x1, 4x5
    style_id: str = "modern"  # modern, neon, fire, elegant

class ClipDataResponse(BaseModel):
    task_id: str
    video_id: str
    format_id: str
    style_id: str
    download_url: str
    highlights: List[Dict]
    transcript: List[Dict]
    video_duration: float

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.post("/api/videos/upload", response_model=VideoUploadResponse)
async def upload_video(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞–º—è—Ç–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        if not check_memory_limit():
            cleanup_old_files()
            if not check_memory_limit():
                raise HTTPException(status_code=507, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if file.size > Config.MAX_FILE_SIZE:
            raise HTTPException(status_code=413, detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º {Config.MAX_FILE_SIZE // (1024*1024)}MB")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
        video_id = str(uuid.uuid4())
        filename = f"{video_id}_{file.filename}"
        file_path = os.path.join(Config.UPLOAD_DIR, filename)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–∞–Ω–∫–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        with open(file_path, "wb") as buffer:
            while True:
                chunk = await file.read(8192)  # –ß–∏—Ç–∞–µ–º –ø–æ 8KB
                if not chunk:
                    break
                buffer.write(chunk)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
        duration = get_video_duration(file_path)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–º—è—Ç–∏
        memory_info = get_memory_usage()
        logger.info(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {filename}, —Ä–∞–∑–º–µ—Ä: {file.size//1024}KB, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}s, –ø–∞–º—è—Ç—å: {memory_info['process_mb']}MB")
        
        return VideoUploadResponse(
            video_id=video_id,
            filename=filename,
            size=file.size,
            duration=duration
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/videos/analyze")
async def analyze_video(request: AnalyzeRequest, background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        if not check_memory_limit():
            cleanup_old_files()
            if not check_memory_limit():
                raise HTTPException(status_code=507, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        active_tasks = get_active_tasks_count()
        if active_tasks >= Config.MAX_CONCURRENT_TASKS:
            raise HTTPException(status_code=429, detail=f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á ({active_tasks}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        task_id = str(uuid.uuid4())
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞
        background_tasks.add_task(analyze_video_task, task_id, request.video_id)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        analysis_tasks[task_id] = {
            "status": "processing",
            "video_id": request.video_id,
            "created_at": datetime.now(),
            "progress": 0
        }
        
        memory_info = get_memory_usage()
        logger.info(f"üîç –ó–∞–ø—É—â–µ–Ω –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ: {request.video_id}, task_id: {task_id}, –ø–∞–º—è—Ç—å: {memory_info['process_mb']}MB, –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active_tasks + 1}")
        
        return {"task_id": task_id, "status": "processing"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/videos/{video_id}/status")
async def get_video_status(video_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ"""
    try:
        # –ò—â–µ–º –∑–∞–¥–∞—á—É –ø–æ video_id
        task = None
        task_id = None
        for tid, t in analysis_tasks.items():
            if t["video_id"] == video_id:
                task = t
                task_id = tid
                break
        
        if not task:
            raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return {
            "task_id": task_id,
            "video_id": video_id,
            "status": task["status"],
            "progress": task.get("progress", 0),
            "result": task.get("result"),
            "error": task.get("error")
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/videos/download/{filename}")
async def download_video(filename: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏–ª–∏ –∫–ª–∏–ø)"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ø–∞–ø–∫–µ –∫–ª–∏–ø–æ–≤
        clip_path = os.path.join(Config.CLIPS_DIR, filename)
        if os.path.exists(clip_path):
            logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–ª–∏–ø–∞: {filename}")
            return FileResponse(
                clip_path,
                media_type="video/mp4",
                filename=filename
            )
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–ª–∏–ø–∞—Ö, –∏—â–µ–º –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ
        video_path = os.path.join(Config.UPLOAD_DIR, filename)
        if os.path.exists(video_path):
            logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {filename}")
            return FileResponse(
                video_path,
                media_type="video/mp4",
                filename=filename
            )
        
        # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/clips/generate", response_model=ClipDataResponse)
async def generate_clips_data(request: ClipGenerateRequest):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–ø–æ–≤ —Å –Ω–∞—Ä–µ–∑–∫–æ–π –≤–∏–¥–µ–æ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (—Å fallback)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
        task = None
        for t in analysis_tasks.values():
            if t["video_id"] == request.video_id and t["status"] == "completed":
                task = t
                break
        
        if not task:
            raise HTTPException(status_code=400, detail="–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        result = task["result"]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª –≤–∏–¥–µ–æ
        video_files = [f for f in os.listdir(Config.UPLOAD_DIR) if f.startswith(request.video_id)]
        if not video_files:
            raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        video_path = os.path.join(Config.UPLOAD_DIR, video_files[0])
        video_filename = video_files[0]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º task_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        task_id = str(uuid.uuid4())
        
        logger.info(f"üé¨ –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ –∫–ª–∏–ø—ã: {request.video_id}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞—Ä–µ–∑–∞—Ç—å –≤–∏–¥–µ–æ –Ω–∞ –∫–ª–∏–ø—ã
        try:
            clips_data = await cut_video_into_clips(
                video_path=video_path,
                highlights=result["highlights"],
                transcript=result["transcript"],
                video_id=request.video_id,
                format_id=request.format_id
            )
            
            if clips_data and len(clips_data) > 0:
                logger.info(f"‚úÖ –ö–ª–∏–ø—ã —Å–æ–∑–¥–∞–Ω—ã: {len(clips_data)} —à—Ç—É–∫")
                
                return ClipDataResponse(
                    task_id=task_id,
                    video_id=request.video_id,
                    format_id=request.format_id,
                    style_id=request.style_id,
                    download_url="",  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–ª–∏–ø–æ–≤
                    highlights=clips_data,  # –î–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–ø–∞—Ö
                    transcript=result["transcript"],
                    video_duration=result["video_duration"]
                )
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–ø—ã")
                
        except Exception as cutting_error:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ: {cutting_error}")
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ –Ω–∞—Ä–µ–∑–∫–∏)")
            
            # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –Ω–∞—Ä–µ–∑–∫–∏
            download_url = f"/api/videos/download/{video_filename}"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–∞–π–ª–∞–π—Ç–∞ (–±–µ–∑ –Ω–∞—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ)
            enhanced_highlights = []
            for i, highlight in enumerate(result["highlights"]):
                clip_subtitles = prepare_clip_subtitles(
                    transcript=result["transcript"],
                    start_time=highlight["start_time"],
                    end_time=highlight["end_time"]
                )
                
                enhanced_highlight = {
                    **highlight,
                    "clip_id": f"{request.video_id}_clip_{i+1}",
                    "video_url": download_url,  # –û–¥–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –≤—Å–µ—Ö
                    "duration": highlight["end_time"] - highlight["start_time"],
                    "subtitles": clip_subtitles,
                    "format_id": request.format_id,
                    "needs_client_cutting": True  # –§–ª–∞–≥ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                }
                enhanced_highlights.append(enhanced_highlight)
            
            logger.info(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–æ–≤ (—Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º): {request.video_id}")
            
            return ClipDataResponse(
                task_id=task_id,
                video_id=request.video_id,
                format_id=request.format_id,
                style_id=request.style_id,
                download_url=download_url,
                highlights=enhanced_highlights,
                transcript=result["transcript"],
                video_duration=result["video_duration"]
            )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def cut_video_into_clips(video_path: str, highlights: List[Dict], transcript: List[Dict], video_id: str, format_id: str) -> List[Dict]:
    """–ù–∞—Ä–µ–∑–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª–∏–ø—ã"""
    clips_data = []
    
    for i, highlight in enumerate(highlights):
        try:
            clip_id = f"{video_id}_clip_{i+1}"
            clip_filename = f"{clip_id}.mp4"
            clip_path = os.path.join(Config.CLIPS_DIR, clip_filename)
            
            # –ù–∞—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffmpeg
            success = cut_video_segment(
                input_path=video_path,
                output_path=clip_path,
                start_time=highlight["start_time"],
                end_time=highlight["end_time"],
                format_id=format_id
            )
            
            if not success:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Ä–µ–∑–∫–∏ –∫–ª–∏–ø–∞ {clip_id}")
                continue
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–ø–∞
            clip_subtitles = prepare_clip_subtitles(
                transcript=transcript,
                start_time=highlight["start_time"],
                end_time=highlight["end_time"]
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–ø –≤ Supabase (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            video_url = upload_clip_to_supabase(clip_path, clip_filename)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–ø–∞
            clip_data = {
                **highlight,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ö–∞–π–ª–∞–π—Ç–∞
                "clip_id": clip_id,
                "video_url": video_url,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ Supabase –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π
                "duration": highlight["end_time"] - highlight["start_time"],
                "subtitles": clip_subtitles,
                "format_id": format_id
            }
            
            clips_data.append(clip_data)
            logger.info(f"‚úÖ –ö–ª–∏–ø —Å–æ–∑–¥–∞–Ω: {clip_id} ({clip_data['duration']:.1f}s)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞ {i+1}: {e}")
            continue
    
    return clips_data

def cut_video_segment(input_path: str, output_path: str, start_time: float, end_time: float, format_id: str) -> bool:
    """–ù–∞—Ä–µ–∑–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffmpeg (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è 512MB RAM)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        if not check_memory_limit():
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ffmpeg –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            subprocess.run(["ffmpeg", "-version"], capture_output=True, check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            logger.error("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞
        crop_params = get_crop_parameters_for_format(format_id)
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ffmpeg –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        cmd = [
            "ffmpeg", "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã
            "-ss", str(start_time),  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ü–ï–†–ï–î –≤—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞)
            "-i", input_path,  # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            "-t", str(end_time - start_time),  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            "-vf", f"scale={crop_params['width']}:{crop_params['height']}:force_original_aspect_ratio=increase,crop={crop_params['width']}:{crop_params['height']}",
            "-c:v", "libx264",  # –í–∏–¥–µ–æ –∫–æ–¥–µ–∫
            "-c:a", "aac",  # –ê—É–¥–∏–æ –∫–æ–¥–µ–∫
            "-preset", "veryfast",  # –ë—ã—Å—Ç—Ä–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–æ–º–ø—Ä–æ–º–∏—Å—Å —Å–∫–æ—Ä–æ—Å—Ç—å/–∫–∞—á–µ—Å—Ç–≤–æ)
            "-crf", "26",  # –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            "-threads", "2",  # –î–≤–∞ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            "-avoid_negative_ts", "make_zero",  # –ò–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å —Ç–∞–π–º–∏–Ω–≥–æ–º
            output_path
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∫–ª–∏–ø–æ–≤
        clip_duration = end_time - start_time
        timeout = max(240, clip_duration * Config.FFMPEG_TIMEOUT_MULTIPLIER)  # –ú–∏–Ω–∏–º—É–º 4 –º–∏–Ω—É—Ç—ã –∏–ª–∏ 4x –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–ø–∞
        logger.info(f"üé¨ –ù–∞—Ä–µ–∑–∫–∞ –∫–ª–∏–ø–∞ {clip_duration:.1f}—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º {timeout}—Å")
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout)
        
        if result.returncode == 0 and os.path.exists(output_path):
            logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–µ–≥–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {output_path}")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {result.stderr}")
            # Fallback: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
            simple_cmd = [
                "ffmpeg", "-y",
                "-ss", str(start_time),
                "-i", input_path,
                "-t", str(end_time - start_time),
                "-c", "copy",  # –ö–æ–ø–∏—Ä—É–µ–º –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                output_path
            ]
            try:
                simple_result = subprocess.run(simple_cmd, capture_output=True, text=True, timeout=timeout//2)
                if simple_result.returncode == 0 and os.path.exists(output_path):
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–µ–≥–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞): {output_path}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ ffmpeg (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞): {simple_result.stderr}")
                    return False
            except subprocess.TimeoutExpired:
                logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –¥–∞–∂–µ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π")
                return False
            
    except subprocess.TimeoutExpired:
        logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –Ω–∞—Ä–µ–∑–∫–µ –≤–∏–¥–µ–æ: {clip_duration:.1f}—Å –∫–ª–∏–ø, —Ç–∞–π–º–∞—É—Ç {timeout}—Å")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
        return False

def get_crop_parameters_for_format(format_id: str) -> Dict[str, int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    formats = {
        "9x16": {"width": 720, "height": 1280},  # TikTok/Instagram Stories
        "16x9": {"width": 1280, "height": 720},  # YouTube/Landscape
        "1x1": {"width": 720, "height": 720},    # Instagram Post
        "4x5": {"width": 720, "height": 900}     # Instagram Portrait
    }
    return formats.get(format_id, formats["9x16"])

def prepare_clip_subtitles(transcript: List[Dict], start_time: float, end_time: float) -> List[Dict]:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–ø–∞"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    clip_words = [
        word for word in transcript 
        if word.get("start", 0) >= start_time and word.get("end", 0) <= end_time
    ]
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞ –∫–ª–∏–ø–∞
    adjusted_words = []
    for word in clip_words:
        adjusted_word = {
            **word,
            "start": word.get("start", 0) - start_time,
            "end": word.get("end", 0) - start_time
        }
        adjusted_words.append(adjusted_word)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –≤ —Å—É–±—Ç–∏—Ç—Ä—ã (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤)
    words_per_group = int(os.getenv("SUBTITLES_WORDS_PER_GROUP", "6"))
    subtitles = group_words_into_subtitles(adjusted_words, words_per_group=words_per_group)
    
    logger.info(f"üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(subtitles)} —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è –∫–ª–∏–ø–∞ ({start_time:.1f}s - {end_time:.1f}s)")
    
    return subtitles

def group_words_into_subtitles(words: List[Dict], words_per_group: int = 6) -> List[Dict]:
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –≤ —Å—É–±—Ç–∏—Ç—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤"""
    subtitles = []
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    use_uppercase = os.getenv("SUBTITLES_UPPERCASE", "true").lower() == "true"
    
    for i in range(0, len(words), words_per_group):
        group = words[i:i + words_per_group]
        
        if group:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –≥—Ä—É–ø–ø—ã –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            processed_group = []
            for word in group:
                processed_word = word.copy()
                if use_uppercase and "word" in processed_word:
                    processed_word["word"] = processed_word["word"].upper()
                processed_group.append(processed_word)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä–∞
            subtitle_text = " ".join(word.get("word", "") for word in processed_group)
            
            subtitle = {
                "id": f"subtitle_{i // words_per_group}",
                "start": group[0].get("start", 0),
                "end": group[-1].get("end", 0),
                "text": subtitle_text,
                "words": processed_group  # –î–ª—è –∫–∞—Ä–∞–æ–∫–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
            }
            subtitles.append(subtitle)
    
    return subtitles

@app.get("/api/videos/{video_id}/export-data")
async def get_export_data(video_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞
        task = None
        for t in analysis_tasks.values():
            if t["video_id"] == video_id and t["status"] == "completed":
                task = t
                break
        
        if not task:
            raise HTTPException(status_code=400, detail="–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        result = task["result"]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª –≤–∏–¥–µ–æ
        video_files = [f for f in os.listdir(Config.UPLOAD_DIR) if f.startswith(video_id)]
        if not video_files:
            raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        video_filename = video_files[0]
        
        return {
            "video_id": video_id,
            "video_filename": video_filename,
            "download_url": f"/api/videos/download/{video_filename}",
            "highlights": result["highlights"],
            "transcript": result["transcript"],
            "video_duration": result["video_duration"],
            "analysis_completed_at": task.get("completed_at")
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ
async def analyze_video_task(task_id: str, video_id: str):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ"""
    try:
        logger.info(f"üîç –ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ: {video_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        analysis_tasks[task_id]["progress"] = 10
        
        # –ù–∞—Ö–æ–¥–∏–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        video_files = [f for f in os.listdir(Config.UPLOAD_DIR) if f.startswith(video_id)]
        if not video_files:
            raise Exception("–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        video_path = os.path.join(Config.UPLOAD_DIR, video_files[0])
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ
        analysis_tasks[task_id]["progress"] = 20
        audio_path = os.path.join(Config.AUDIO_DIR, f"{video_id}.wav")
        if not extract_audio(video_path, audio_path):
            raise Exception("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        analysis_tasks[task_id]["progress"] = 50
        transcript_result = safe_transcribe_audio(audio_path)
        if not transcript_result:
            raise Exception("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        
        # –ê–Ω–∞–ª–∏–∑ —Å ChatGPT
        analysis_tasks[task_id]["progress"] = 80
        video_duration = get_video_duration(video_path)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
        if "words" in transcript_result:
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç OpenAI API —Å word-level timestamps
            transcript_text = " ".join([word["word"] for word in transcript_result["words"]])
            transcript_words = transcript_result["words"]
        elif "segments" in transcript_result:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
            transcript_text = " ".join([segment["text"] for segment in transcript_result["segments"]])
            transcript_words = []
            for segment in transcript_result["segments"]:
                if "words" in segment:
                    transcript_words.extend(segment["words"])
        else:
            # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
            transcript_text = transcript_result.get("text", "")
            transcript_words = []
        
        logger.info(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø–æ–ª—É—á–µ–Ω: {len(transcript_text)} —Å–∏–º–≤–æ–ª–æ–≤, {len(transcript_words)} —Å–ª–æ–≤")
        
        analysis_result = analyze_with_chatgpt(transcript_text, video_duration)
        if not analysis_result:
            # –°–æ–∑–¥–∞–µ–º fallback —Ö–∞–π–ª–∞–π—Ç—ã
            analysis_result = create_fallback_highlights(video_duration, 3)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        analysis_tasks[task_id].update({
            "status": "completed",
            "progress": 100,
            "completed_at": datetime.now(),
            "result": {
                "highlights": analysis_result["highlights"],
                "transcript": transcript_words,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
                "video_duration": video_duration
            }
        })
        
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {video_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ {video_id}: {e}")
        analysis_tasks[task_id].update({
            "status": "failed",
            "error": str(e)
        })

def get_crop_parameters(width: int, height: int, format_type: str) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    formats = {
        "9:16": {"target_width": 720, "target_height": 1280},
        "16:9": {"target_width": 1280, "target_height": 720},
        "1:1": {"target_width": 720, "target_height": 720},
        "4:5": {"target_width": 720, "target_height": 900}
    }
    target = formats.get(format_type, formats["9:16"])
    scale_x = target["target_width"] / width
    scale_y = target["target_height"] / height
    scale = max(scale_x, scale_y)
    new_width = int(width * scale)
    new_height = int(height * scale)
    crop_x = (new_width - target["target_width"]) // 2
    crop_y = (new_height - target["target_height"]) // 2
    return {
        "width": target["target_width"],
        "height": target["target_height"]
    }

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
import threading
import time

def periodic_cleanup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    while True:
        try:
            time.sleep(Config.CLEANUP_INTERVAL)
            memory_info = get_memory_usage()
            
            # –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É
            if memory_info["process_mb"] > (Config.MAX_MEMORY_USAGE // (1024 * 1024)) * 0.8:
                logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_info['process_mb']}MB")
                cleaned = cleanup_old_files()
                logger.info(f"üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ {cleaned} —Ñ–∞–π–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏: {e}")

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏
cleanup_thread = threading.Thread(target=periodic_cleanup, daemon=True)
cleanup_thread.start()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è 512MB RAM
    memory_info = get_memory_usage()
    logger.info(f"üöÄ AgentFlow AI Clips v18.6.0 –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üíæ –ü–∞–º—è—Ç—å: {memory_info['process_mb']}MB / {memory_info['total_mb']}MB")
    logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è 512MB RAM:")
    logger.info(f"   - –ú–∞–∫—Å–∏–º—É–º —Ñ–∞–π–ª–∞: {Config.MAX_FILE_SIZE // (1024*1024)}MB")
    logger.info(f"   - –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {Config.MAX_MEMORY_USAGE // (1024*1024)}MB")
    logger.info(f"   - –ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á: {Config.MAX_CONCURRENT_TASKS}")
    logger.info(f"   - –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ: {Config.CLEANUP_INTERVAL // 60} –º–∏–Ω—É—Ç")
    logger.info(f"üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
    
    uvicorn.run(app, host="0.0.0.0", port=port)

