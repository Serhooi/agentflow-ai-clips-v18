# AgentFlow AI Clips v20.1.0 - –£–õ–£–ß–®–ï–ù–ù–´–ï –°–£–ë–¢–ò–¢–†–´ —Å WhisperX
# –ó–∞–º–µ–Ω–∞ Whisper –Ω–∞ WhisperX –¥–ª—è word-level —Ç–∞–π–º–∏–Ω–≥–æ–≤

import os
import json
import uuid
import asyncio
import logging
import subprocess
import tempfile
import shutil
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from pathlib import Path
import psutil
import time

from fastapi import FastAPI, File, UploadFile, HTTPException, BackgroundTasks, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import openai
from openai import OpenAI

# WhisperX –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤
import whisperx
import torch

# Supabase Storage –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
try:
    from supabase import create_client, Client
    SUPABASE_AVAILABLE = True
except ImportError:
    SUPABASE_AVAILABLE = False
    logger.warning("Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("app")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(
    title="AgentFlow AI Clips API",
    description="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª–∏–ø–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ WhisperX",
    version="20.1.0"
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–ø–∫–∏
    UPLOAD_DIR = "uploads"
    AUDIO_DIR = "audio"
    CLIPS_DIR = "clips"
    ASS_DIR = "ass_subtitles"
    
    # –õ–∏–º–∏—Ç—ã
    MAX_FILE_SIZE = 500 * 1024 * 1024  # 500MB
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏
    MAX_TASK_AGE = 24 * 60 * 60  # 24 —á–∞—Å–∞
    CLEANUP_INTERVAL = 3600      # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
    
    # ASS —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä–∞–æ–∫–µ
    ASS_STYLES = {
        "modern": {
            "name": "Modern",
            "fontname": "Montserrat",
            "fontsize": 16,
            "primarycolor": "&Hffffff",  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            "secondarycolor": "&H00ff00",  # –ó–µ–ª–µ–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–∞—Ä–∞–æ–∫–µ
            "outlinecolor": "&H000000",
            "backcolor": "&H80000000",
            "bold": -1,
            "italic": 0,
            "underline": 0,
            "strikeout": 0,
            "scalex": 100,
            "scaley": 100,
            "spacing": 0,
            "angle": 0,
            "borderstyle": 1,
            "outline": 1,
            "shadow": 0,
            "alignment": 2,
            "marginl": 10,
            "marginr": 10,
            "marginv": 60,  # Safe zone —Å–Ω–∏–∑—É
            "encoding": 1,
            "preview_colors": ["#ffffff", "#00ff00", "#000000"]
        },
        "neon": {
            "name": "Neon",
            "fontname": "Arial",
            "fontsize": 16,
            "primarycolor": "&Hffffff",
            "secondarycolor": "&Hff00ff",  # –ü—É—Ä–ø—É—Ä–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
            "outlinecolor": "&H000000",
            "backcolor": "&H80000000",
            "bold": -1,
            "italic": 0,
            "underline": 0,
            "strikeout": 0,
            "scalex": 100,
            "scaley": 100,
            "spacing": 0,
            "angle": 0,
            "borderstyle": 1,
            "outline": 2,
            "shadow": 0,
            "alignment": 2,
            "marginl": 10,
            "marginr": 10,
            "marginv": 60,
            "encoding": 1,
            "preview_colors": ["#ffffff", "#ff00ff", "#000000"]
        },
        "fire": {
            "name": "Fire",
            "fontname": "Impact",
            "fontsize": 16,
            "primarycolor": "&Hffffff",
            "secondarycolor": "&H0080ff",  # –û—Ä–∞–Ω–∂–µ–≤–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
            "outlinecolor": "&H000000",
            "backcolor": "&H80000000",
            "bold": -1,
            "italic": 0,
            "underline": 0,
            "strikeout": 0,
            "scalex": 100,
            "scaley": 100,
            "spacing": 0,
            "angle": 0,
            "borderstyle": 1,
            "outline": 2,
            "shadow": 1,
            "alignment": 2,
            "marginl": 10,
            "marginr": 10,
            "marginv": 60,
            "encoding": 1,
            "preview_colors": ["#ffffff", "#ff8000", "#000000"]
        },
        "elegant": {
            "name": "Elegant",
            "fontname": "Georgia",
            "fontsize": 16,
            "primarycolor": "&Hffffff",
            "secondarycolor": "&H00ffff",  # –ñ–µ–ª—Ç–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
            "outlinecolor": "&H000000",
            "backcolor": "&H80000000",
            "bold": 0,
            "italic": 0,
            "underline": 0,
            "strikeout": 0,
            "scalex": 100,
            "scaley": 100,
            "spacing": 0,
            "angle": 0,
            "borderstyle": 1,
            "outline": 1,
            "shadow": 0,
            "alignment": 2,
            "marginl": 10,
            "marginr": 10,
            "marginv": 60,
            "encoding": 1,
            "preview_colors": ["#ffffff", "#ffff00", "#000000"]
        }
    }

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
for directory in [Config.UPLOAD_DIR, Config.AUDIO_DIR, Config.CLIPS_DIR, Config.ASS_DIR]:
    os.makedirs(directory, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
analysis_tasks = {}
generation_tasks = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("OPENAI_API_KEY –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

client = OpenAI(api_key=openai_api_key)
logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase = None
service_supabase = None
SUPABASE_BUCKET = "video-results"

# WhisperX –º–æ–¥–µ–ª–∏ (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
whisperx_model = None
align_model = None
align_metadata = None
whisperx_available = False

def init_supabase():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    global supabase, service_supabase
    
    if not SUPABASE_AVAILABLE:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        return False
    
    try:
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_anon_key = os.getenv("SUPABASE_ANON_KEY")
        supabase_service_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
        
        if not all([supabase_url, supabase_anon_key, supabase_service_key]):
            logger.warning("‚ö†Ô∏è –ù–µ –≤—Å–µ Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç
        supabase = create_client(supabase_url, supabase_anon_key)
        
        # Service role –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        service_supabase = create_client(supabase_url, supabase_service_key)
        
        logger.info("‚úÖ Supabase Storage –ø–æ–¥–∫–ª—é—á–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
supabase_available = init_supabase()

def init_whisperx():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhisperX –º–æ–¥–µ–ª–µ–π"""
    global whisperx_model, align_model, align_metadata, whisperx_available
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (CPU –¥–ª—è Render.com)
        device = "cpu"
        compute_type = "int8"  # –î–ª—è CPU –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ WhisperX –º–æ–¥–µ–ª–∏...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å WhisperX
        whisperx_model = whisperx.load_model(
            "base", 
            device=device, 
            compute_type=compute_type,
            language="ru"  # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )
        
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è (word-level timing)
        align_model, align_metadata = whisperx.load_align_model(
            language_code="ru", 
            device=device
        )
        
        logger.info("‚úÖ WhisperX –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        whisperx_available = True
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ WhisperX: {e}")
        whisperx_available = False
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhisperX –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_whisperx()

# Pydantic –º–æ–¥–µ–ª–∏
class VideoAnalysisRequest(BaseModel):
    video_id: str

class ClipGenerationRequest(BaseModel):
    video_id: str
    format_id: str
    style_id: str = "modern"

class VideoInfo(BaseModel):
    id: str
    filename: str
    duration: float
    size: int
    status: str
    upload_time: str

class ClipInfo(BaseModel):
    id: str
    video_id: str
    format_id: str
    style_id: str
    status: str
    progress: int
    current_stage: Optional[str] = None
    stage_progress: Optional[int] = None

def upload_clip_to_supabase(local_path: str, filename: str) -> Optional[str]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–ø–∞ –≤ Supabase Storage"""
    if not supabase_available or not service_supabase:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å")
        return f"/api/clips/download/{filename}"
    
    try:
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        with open(local_path, 'rb') as file:
            file_content = file.read()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Supabase Storage
        storage_path = f"clips/{datetime.now().strftime('%Y%m%d')}/{filename}"
        
        try:
            response = service_supabase.storage.from_(SUPABASE_BUCKET).upload(
                storage_path, 
                file_content,
                file_options={"content-type": "video/mp4"}
            )
            
            if response:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
                public_url = service_supabase.storage.from_(SUPABASE_BUCKET).get_public_url(storage_path)
                logger.info(f"‚úÖ –ö–ª–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase: {storage_path}")
                return public_url
                
        except Exception as upload_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {upload_error}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
            try:
                response = service_supabase.storage.from_(SUPABASE_BUCKET).upload(
                    storage_path, 
                    file_content
                )
                
                if response:
                    public_url = service_supabase.storage.from_(SUPABASE_BUCKET).get_public_url(storage_path)
                    logger.info(f"‚úÖ –ö–ª–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±): {storage_path}")
                    return public_url
                    
            except Exception as alt_error:
                logger.error(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {alt_error}")
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase: {e}")
    
    # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
    logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ")
    return f"/api/clips/download/{filename}"

def get_video_duration(video_path: str) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
    try:
        cmd = [
            'ffprobe', '-v', 'quiet', '-print_format', 'json', 
            '-show_format', video_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        data = json.loads(result.stdout)
        return float(data['format']['duration'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ: {e}")
        return 60.0  # Fallback

def extract_audio(video_path: str, audio_path: str) -> bool:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ"""
    try:
        cmd = [
            'ffmpeg', '-i', video_path, '-vn', '-acodec', 'mp3', 
            '-ar', '16000', '-ac', '1', '-y', audio_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return os.path.exists(audio_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        return False

def safe_transcribe_audio(audio_path: str) -> Optional[Dict]:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å WhisperX –¥–ª—è word-level —Ç–∞–π–º–∏–Ω–≥–æ–≤"""
    global whisperx_model, align_model, align_metadata, whisperx_available
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º WhisperX
    if whisperx_available and whisperx_model:
        try:
            logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ –¥–ª—è WhisperX...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            audio = whisperx.load_audio(audio_path)
            
            logger.info("üîÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å WhisperX...")
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
            result = whisperx_model.transcribe(audio, batch_size=16)
            
            logger.info("üîÑ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è word-level —Ç–∞–π–º–∏–Ω–≥–æ–≤...")
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è word-level —Ç–∞–π–º–∏–Ω–≥–æ–≤
            if align_model and align_metadata:
                result = whisperx.align(
                    result["segments"], 
                    align_model, 
                    align_metadata, 
                    audio, 
                    device="cpu"
                )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            formatted_result = {
                "text": result.get("text", ""),
                "segments": []
            }
            
            for segment in result.get("segments", []):
                formatted_segment = {
                    "id": segment.get("id", 0),
                    "start": segment.get("start", 0.0),
                    "end": segment.get("end", 0.0),
                    "text": segment.get("text", ""),
                    "words": []
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º word-level —Ç–∞–π–º–∏–Ω–≥–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                if "words" in segment:
                    for word in segment["words"]:
                        formatted_word = {
                            "word": word.get("word", ""),
                            "start": word.get("start", 0.0),
                            "end": word.get("end", 0.0),
                            "score": word.get("score", 1.0)
                        }
                        formatted_segment["words"].append(formatted_word)
                
                formatted_result["segments"].append(formatted_segment)
            
            logger.info(f"‚úÖ WhisperX —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(formatted_result['segments'])} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
            return formatted_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WhisperX —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
            logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenAI Whisper API fallback")
    
    # Fallback –Ω–∞ OpenAI Whisper API
    try:
        logger.info("üîÑ Fallback —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI Whisper API...")
        
        with open(audio_path, "rb") as audio_file:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º response_format="verbose_json" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="verbose_json",
                timestamp_granularities=["word"]
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
            if hasattr(transcript, 'model_dump'):
                return transcript.model_dump()
            elif hasattr(transcript, 'dict'):
                return transcript.dict()
            else:
                # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
                transcript = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    response_format="json"
                )
                return transcript.model_dump() if hasattr(transcript, 'model_dump') else dict(transcript)
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        return None

def analyze_with_chatgpt(transcript_text: str, video_duration: float) -> Optional[Dict]:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Å ChatGPT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 3-5 –∫–ª–∏–ø–æ–≤"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
        if video_duration <= 30:
            target_clips = 2
        elif video_duration <= 60:
            target_clips = 3
        elif video_duration <= 120:
            target_clips = 4
        else:
            target_clips = 5
        
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {video_duration:.1f} —Å–µ–∫—É–Ω–¥ –∏ –Ω–∞–π–¥–∏ {target_clips} —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª–∏–ø–æ–≤.

–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {transcript_text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –°–æ–∑–¥–∞–π –†–û–í–ù–û {target_clips} –∫–ª–∏–ø–æ–≤
2. –ö–∞–∂–¥—ã–π –∫–ª–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 15-20 —Å–µ–∫—É–Ω–¥
3. –ö–ª–∏–ø—ã –ù–ï –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
4. –í—ã–±–∏—Ä–∞–π —Å–∞–º—ã–µ —è—Ä–∫–∏–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
5. –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–∞–ª–æ, —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∫–ª–∏–ø—ã –ø–æ –≤—Å–µ–º—É –≤–∏–¥–µ–æ
6. –í—Ä–µ–º—è –∫–ª–∏–ø–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0-{video_duration:.1f} —Å–µ–∫—É–Ω–¥

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "highlights": [
        {{
            "start_time": 0,
            "end_time": 18,
            "title": "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫",
            "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è",
            "keywords": ["–∫–ª—é—á–µ–≤–æ–µ", "—Å–ª–æ–≤–æ"]
        }},
        {{
            "start_time": 20,
            "end_time": 38,
            "title": "–í—Ç–æ—Ä–æ–π –º–æ–º–µ–Ω—Ç",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∏–ø–∞",
            "keywords": ["–¥—Ä—É–≥–∏–µ", "—Å–ª–æ–≤–∞"]
        }}
    ]
}}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!
"""
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1500,
            temperature=0.7
        )
        
        content = response.choices[0].message.content.strip()
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if content.startswith('```json'):
            content = content[7:]
        if content.endswith('```'):
            content = content[:-3]
        content = content.strip()
        
        try:
            result = json.loads(content)
            highlights = result.get("highlights", [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤
            if len(highlights) < target_clips:
                logger.warning(f"ChatGPT –≤–µ—Ä–Ω—É–ª —Ç–æ–ª—å–∫–æ {len(highlights)} –∫–ª–∏–ø–æ–≤ –≤–º–µ—Å—Ç–æ {target_clips}")
                # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                while len(highlights) < target_clips:
                    last_end = highlights[-1]["end_time"] if highlights else 0
                    if last_end + 20 <= video_duration:
                        highlights.append({
                            "start_time": last_end + 2,
                            "end_time": min(last_end + 20, video_duration),
                            "title": f"–ö–ª–∏–ø {len(highlights) + 1}",
                            "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–ø",
                            "keywords": []
                        })
                    else:
                        break
            
            return {"highlights": highlights}
            
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç ChatGPT: {e}")
            logger.error(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {content}")
            
            # Fallback - —Å–æ–∑–¥–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–ø—ã
            return create_fallback_highlights(video_duration, target_clips)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å ChatGPT: {e}")
        return create_fallback_highlights(video_duration, 3)

def create_fallback_highlights(video_duration: float, target_clips: int) -> Dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ fallback –∫–ª–∏–ø–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ ChatGPT"""
    highlights = []
    clip_duration = 18  # 18 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–ª–∏–ø
    gap = 2  # 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∫–ª–∏–ø–∞–º–∏
    
    for i in range(target_clips):
        start = i * (clip_duration + gap)
        end = start + clip_duration
        
        if end > video_duration:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –¥–µ–ª–∞–µ–º –∫–ª–∏–ø –¥–æ –∫–æ–Ω—Ü–∞ –≤–∏–¥–µ–æ
            end = video_duration
            start = max(0, end - clip_duration)
        
        if start >= video_duration - 5:  # –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
            break
            
        highlights.append({
            "start_time": start,
            "end_time": end,
            "title": f"–ö–ª–∏–ø {i+1}",
            "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª–∏–ø",
            "keywords": []
        })
    
    return {"highlights": highlights}

# –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å ASS-—Ñ–æ—Ä–º–∞—Ç–æ–º –∏ –∫–∞—Ä–∞–æ–∫–µ-—ç—Ñ—Ñ–µ–∫—Ç–æ–º
class ASSKaraokeSubtitleSystem:
    """
    –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å ASS-—Ñ–æ—Ä–º–∞—Ç–æ–º –∏ –∫–∞—Ä–∞–æ–∫–µ-—ç—Ñ—Ñ–µ–∫—Ç–æ–º
    –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ research: ASS + FFmpeg + GPU = Opus.pro –∫–∞—á–µ—Å—Ç–≤–æ
    """
    
    def __init__(self):
        self.styles = {
            "modern": {
                "fontname": "Arial",
                "fontsize": 48,
                "primarycolor": "&H00FFFFFF",
                "secondarycolor": "&H000000FF", 
                "outlinecolor": "&H00000000",
                "backcolor": "&H80000000",
                "outline": 2,
                "shadow": 0,
                "alignment": 2,
                "marginv": 60
            },
            "neon": {
                "fontname": "Arial",
                "fontsize": 52,
                "primarycolor": "&H0000FFFF",
                "secondarycolor": "&H00FF00FF",
                "outlinecolor": "&H00000000", 
                "backcolor": "&H80000000",
                "outline": 3,
                "shadow": 2,
                "alignment": 2,
                "marginv": 60
            },
            "fire": {
                "fontname": "Arial",
                "fontsize": 50,
                "primarycolor": "&H0000AAFF",
                "secondarycolor": "&H000080FF",
                "outlinecolor": "&H00000000",
                "backcolor": "&H80000000", 
                "outline": 2,
                "shadow": 1,
                "alignment": 2,
                "marginv": 60
            },
            "elegant": {
                "fontname": "Arial",
                "fontsize": 46,
                "primarycolor": "&H00FFFF00",
                "secondarycolor": "&H00FFFF80",
                "outlinecolor": "&H00000000",
                "backcolor": "&H80000000",
                "outline": 2,
                "shadow": 0,
                "alignment": 2,
                "marginv": 60
            }
        }
        
    def generate_ass_file(self, words_data: List[Dict], style: str = "modern", video_duration: float = 10.0) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ASS —Ñ–∞–π–ª —Å –∫–∞—Ä–∞–æ–∫–µ-—ç—Ñ—Ñ–µ–∫—Ç–æ–º –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–ª–æ–≤
        
        Args:
            words_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ —Å —Ç–∞–π–º–∏–Ω–≥–∞–º–∏ [{"word": "Hello", "start": 0.0, "end": 1.0}, ...]
            style: –°—Ç–∏–ª—å —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (modern, neon, fire, elegant)
            video_duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É ASS —Ñ–∞–π–ª—É
        """
        try:
            style_config = self.styles.get(style, self.styles["modern"])
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            ass_filename = f"subtitles_{uuid.uuid4().hex[:8]}.ass"
            ass_path = os.path.join("/tmp", ass_filename)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ ASS —Ñ–∞–π–ª–∞
            ass_content = f"""[Script Info]
Title: AgentFlow AI Clips Karaoke Subtitles
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.709

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,{style_config['fontname']},{style_config['fontsize']},{style_config['primarycolor']},{style_config['secondarycolor']},{style_config['outlinecolor']},{style_config['backcolor']},1,0,0,0,100,100,0,0,1,{style_config['outline']},{style_config['shadow']},{style_config['alignment']},10,10,{style_config['marginv']},1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –≤ —Ñ—Ä–∞–∑—ã (–ø–æ 3-4 —Å–ª–æ–≤–∞)
            phrases = self._group_words_into_phrases(words_data)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∑—ã
            for phrase in phrases:
                start_time = self._seconds_to_ass_time(phrase['start'])
                end_time = self._seconds_to_ass_time(phrase['end'])
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä–∞–æ–∫–µ-—ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Ñ—Ä–∞–∑–µ
                karaoke_text = self._create_karaoke_effect(phrase['words'])
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ ASS
                ass_content += f"Dialogue: 0,{start_time},{end_time},Default,,0,0,0,,{karaoke_text}\n"
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            with open(ass_path, 'w', encoding='utf-8') as f:
                f.write(ass_content)
            
            logger.info(f"‚úÖ ASS —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {ass_path}")
            return ass_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ASS —Ñ–∞–π–ª–∞: {e}")
            raise
    
    def _group_words_into_phrases(self, words_data: List[Dict], max_words_per_phrase: int = 4) -> List[Dict]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –≤ —Ñ—Ä–∞–∑—ã –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (3-4 —Å–ª–æ–≤–∞ –∫–∞–∫ –≤ Opus.pro)"""
        phrases = []
        current_phrase = []
        
        for word_data in words_data:
            current_phrase.append(word_data)
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ —Å–ª–æ–≤ –∏–ª–∏ —ç—Ç–æ –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if (len(current_phrase) >= max_words_per_phrase or 
                word_data['word'].endswith(('.', '!', '?', ','))):
                
                if current_phrase:
                    phrases.append({
                        'words': current_phrase.copy(),
                        'start': current_phrase[0]['start'],
                        'end': current_phrase[-1]['end']
                    })
                    current_phrase = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞
        if current_phrase:
            phrases.append({
                'words': current_phrase,
                'start': current_phrase[0]['start'],
                'end': current_phrase[-1]['end']
            })
        
        return phrases
    
    def _create_karaoke_effect(self, words: List[Dict]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä–∞–æ–∫–µ-—ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
        –§–æ—Ä–º–∞—Ç: {\\kf100}Hello{\\kf150}World
        """
        karaoke_parts = []
        
        for i, word_data in enumerate(words):
            word = word_data['word'].strip()
            if not word:
                continue
                
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–∞–Ω—Ç–∏—Å–µ–∫—É–Ω–¥–∞—Ö (1/100 —Å–µ–∫—É–Ω–¥—ã)
            duration = (word_data['end'] - word_data['start']) * 100
            duration = max(50, min(500, int(duration)))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 0.5 –¥–æ 5 —Å–µ–∫—É–Ω–¥
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä–∞–æ–∫–µ-—Ç–µ–≥
            karaoke_parts.append(f"{{\\kf{duration}}}{word}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(words) - 1:
                karaoke_parts.append(" ")
        
        return "".join(karaoke_parts)
    
    def _seconds_to_ass_time(self, seconds: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ ASS (H:MM:SS.CC)"""
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        centiseconds = int((seconds % 1) * 100)
        
        return f"{hours}:{minutes:02d}:{secs:02d}.{centiseconds:02d}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É ASS –∫–∞—Ä–∞–æ–∫–µ
ass_subtitle_system = ASSKaraokeSubtitleSystem()

def create_clip_with_ass_subtitles(
    video_path: str, 
    start_time: float, 
    end_time: float, 
    words_data: List[Dict],
    output_path: str,
    format_type: str = "9:16",
    style: str = "modern"
) -> bool:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–ø —Å ASS —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ (–¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å)
    
    –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ —Å –æ–±—Ä–µ–∑–∫–æ–π
    –≠–¢–ê–ü 2: –ù–∞–ª–æ–∂–µ–Ω–∏–µ ASS —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    """
    try:
        logger.info(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–∞ —Å ASS —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏")
        logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {start_time}-{end_time}s, —Ñ–æ—Ä–º–∞—Ç {format_type}, —Å—Ç–∏–ª—å {style}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è format_type
        format_type = format_type.replace('_', ':')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–µ–∑–∫–∏
        crop_params = get_crop_parameters(1920, 1080, format_type)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        if not crop_params:
            logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format_type}")
            return False
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞
        clip_words = []
        for word_data in words_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–æ–≤–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–ª–∏–ø–∞
            if (word_data['start'] >= start_time and word_data['start'] < end_time) or \
               (word_data['end'] > start_time and word_data['end'] <= end_time) or \
               (word_data['start'] < start_time and word_data['end'] > end_time):
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞ –∫–ª–∏–ø–∞
                word_start = max(0, word_data['start'] - start_time)
                word_end = min(end_time - start_time, word_data['end'] - start_time)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                if word_end > word_start:
                    clip_words.append({
                        'word': word_data['word'],
                        'start': word_start,
                        'end': word_end
                    })
        
        logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(clip_words)} —Å–ª–æ–≤ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
        
        # –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å –æ–±—Ä–µ–∑–∫–æ–π (–ë–ï–ó —Å—É–±—Ç–∏—Ç—Ä–æ–≤)
        temp_video_path = output_path.replace('.mp4', '_temp.mp4')
        
        base_cmd = [
            'ffmpeg', '-i', video_path,
            '-ss', str(start_time),
            '-t', str(end_time - start_time),
            '-vf', f"scale={crop_params['scale']},crop={crop_params['crop']}",
            '-c:v', 'libx264', '-preset', 'fast',
            '-c:a', 'aac', '-b:a', '128k',
            '-y', temp_video_path
        ]
        
        logger.info("üé¨ –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –≤–∏–¥–µ–æ...")
        result = subprocess.run(base_cmd, capture_output=True, text=True, encoding="utf-8", errors="ignore", timeout=300)
        
        if result.returncode != 0:
            logger.error(f"‚ùå –≠–¢–ê–ü 1 –Ω–µ—É–¥–∞—á–µ–Ω: {result.stderr}")
            return False
        
        logger.info("‚úÖ –≠–¢–ê–ü 1 –∑–∞–≤–µ—Ä—à–µ–Ω: –±–∞–∑–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –≠–¢–ê–ü 2: –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º ASS —Å—É–±—Ç–∏—Ç—Ä—ã
        if clip_words:
            try:
                # –°–æ–∑–¥–∞–µ–º ASS —Ñ–∞–π–ª
                ass_path = ass_subtitle_system.generate_ass_file(
                    clip_words, 
                    style, 
                    end_time - start_time
                )
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º ASS —Å—É–±—Ç–∏—Ç—Ä—ã
                subtitle_cmd = [
                    'ffmpeg', '-i', temp_video_path,
                    '-vf', f'ass={ass_path}',
                    '-c:v', 'libx264', '-preset', 'fast',
                    '-c:a', 'copy',
                    '-y', output_path
                ]
                
                logger.info("üìù –≠–¢–ê–ü 2: –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º ASS —Å—É–±—Ç–∏—Ç—Ä—ã...")
                result = subprocess.run(subtitle_cmd, capture_output=True, text=True, encoding="utf-8", errors="ignore", timeout=300)
                
                if result.returncode == 0:
                    logger.info("‚úÖ –≠–¢–ê–ü 2 –∑–∞–≤–µ—Ä—à–µ–Ω: ASS —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞–ª–æ–∂–µ–Ω—ã")
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    if os.path.exists(temp_video_path):
                        os.remove(temp_video_path)
                    if os.path.exists(ass_path):
                        os.remove(ass_path)
                    
                    return True
                else:
                    logger.error(f"‚ùå –≠–¢–ê–ü 2 –Ω–µ—É–¥–∞—á–µ–Ω: {result.stderr}")
                    # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–¥–µ–æ –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                    if os.path.exists(temp_video_path):
                        os.rename(temp_video_path, output_path)
                    logger.info("üîÑ Fallback: —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–ª–∏–ø –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
                    return True
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≠–¢–ê–ü–ï 2: {e}")
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–¥–µ–æ –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                if os.path.exists(temp_video_path):
                    os.rename(temp_video_path, output_path)
                logger.info("üîÑ Fallback: —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–ª–∏–ø –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
                return True
        else:
            # –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –≤–∏–¥–µ–æ
            if os.path.exists(temp_video_path):
                os.rename(temp_video_path, output_path)
            logger.info("‚úÖ –ö–ª–∏–ø —Å–æ–∑–¥–∞–Ω –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–Ω–µ—Ç —Å–ª–æ–≤)")
            return True
            
    except subprocess.TimeoutExpired:
        logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–ø–∞")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞: {e}")
        return False

def get_crop_parameters(width: int, height: int, format_type: str) -> Optional[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    
    formats = {
        "9:16": {"target_width": 720, "target_height": 1280},  # TikTok/Instagram
        "16:9": {"target_width": 1280, "target_height": 720}, # YouTube
        "1:1": {"target_width": 720, "target_height": 720},  # Instagram –∫–≤–∞–¥—Ä–∞—Ç
        "4:5": {"target_width": 720, "target_height": 900}   # Instagram –ø–æ—Ä—Ç—Ä–µ—Ç
    }
    
    if format_type not in formats:
        return None
    
    target = formats[format_type]
    target_width = target["target_width"]
    target_height = target["target_height"]
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    scale_x = target_width / width
    scale_y = target_height / height
    scale = max(scale_x, scale_y)
    
    # –ù–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    new_width = int(width * scale)
    new_height = int(height * scale)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    crop_x = (new_width - target_width) // 2
    crop_y = (new_height - target_height) // 2
    
    return {
        "scale": f"{new_width}:{new_height}",
        "crop": f"{target_width}:{target_height}:{crop_x}:{crop_y}"
    }

# API Endpoints

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {"message": "AgentFlow AI Clips API v18.3.0", "status": "running"}

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    
    # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤
    upload_count = len([f for f in os.listdir(Config.UPLOAD_DIR) if os.path.isfile(os.path.join(Config.UPLOAD_DIR, f))])
    clip_count = len([f for f in os.listdir(Config.CLIPS_DIR) if os.path.isfile(os.path.join(Config.CLIPS_DIR, f))])
    
    return {
        "status": "healthy",
        "version": "18.3.0",
        "timestamp": datetime.now().isoformat(),
        "system": {
            "memory_usage": f"{memory.percent}%",
            "disk_usage": f"{disk.percent}%",
            "uploads": upload_count,
            "clips": clip_count
        },
        "services": {
            "openai": "connected" if openai_api_key else "disconnected",
            "supabase": "connected" if supabase_available else "disconnected"
        }
    }

@app.get("/api/formats")
async def get_formats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    formats = [
        {
            "id": "9:16",
            "name": "Vertical",
            "dimensions": "720√ó1280",
            "description": "TikTok, Instagram Reels, Shorts",
            "aspect_ratio": 0.5625
        },
        {
            "id": "16:9", 
            "name": "Horizontal",
            "dimensions": "1280√ó720",
            "description": "YouTube, Facebook",
            "aspect_ratio": 1.7778
        },
        {
            "id": "1:1",
            "name": "Square", 
            "dimensions": "720√ó720",
            "description": "Instagram Posts",
            "aspect_ratio": 1.0
        },
        {
            "id": "4:5",
            "name": "Portrait",
            "dimensions": "720√ó900", 
            "description": "Instagram Stories",
            "aspect_ratio": 0.8
        }
    ]
    return {"formats": formats}

@app.get("/api/styles")
async def get_styles():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
    styles = []
    for style_id, config in Config.ASS_STYLES.items():
        styles.append({
            "id": style_id,
            "name": config["name"],
            "preview_colors": config["preview_colors"],
            "font": config["fontname"]
        })
    return {"styles": styles}

@app.post("/api/videos/upload")
async def upload_video(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if file.size and file.size > Config.MAX_FILE_SIZE:
            raise HTTPException(status_code=413, detail="–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
        video_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_extension = os.path.splitext(file.filename)[1].lower()
        if file_extension not in ['.mp4', '.mov', '.avi', '.mkv']:
            raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ")
        
        video_path = os.path.join(Config.UPLOAD_DIR, f"{video_id}{file_extension}")
        
        with open(video_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
        duration = get_video_duration(video_path)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
        analysis_tasks[video_id] = {
            "video_id": video_id,
            "filename": file.filename,
            "video_path": video_path,
            "duration": duration,
            "size": len(content),
            "status": "uploaded",
            "upload_time": datetime.now().isoformat()
        }
        
        logger.info(f"üìÅ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename} ({len(content)/1024/1024:.1f} MB)")
        logger.info(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {video_id}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}s")
        
        return {
            "video_id": video_id,
            "filename": file.filename,
            "duration": duration,
            "size": len(content),
            "upload_time": analysis_tasks[video_id]["upload_time"],
            "status": "uploaded"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/videos/analyze")
async def analyze_video(request: VideoAnalysisRequest, background_tasks: BackgroundTasks):
    """–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤"""
    try:
        video_id = request.video_id
        
        if video_id not in analysis_tasks:
            raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(analyze_video_task, video_id)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        analysis_tasks[video_id]["status"] = "analyzing"
        
        return {"message": "–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω", "video_id": video_id}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def analyze_video_task(video_id: str):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ"""
    try:
        analysis_task = analysis_tasks[video_id]
        video_path = analysis_task["video_path"]
        video_duration = analysis_task.get("duration", 60)
        
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ: {video_id}")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ
        audio_path = os.path.join(Config.AUDIO_DIR, f"{video_id}.mp3")
        if not extract_audio(video_path, audio_path):
            raise Exception("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
        
        logger.info(f"üéµ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {audio_path}")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
        transcript_data = safe_transcribe_audio(audio_path)
        if not transcript_data:
            raise Exception("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
        
        logger.info(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –ê–Ω–∞–ª–∏–∑ —Å ChatGPT (–ø–µ—Ä–µ–¥–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ)
        transcript_text = transcript_data.get('text', '')
        analysis_result = analyze_with_chatgpt(transcript_text, video_duration)
        
        if not analysis_result:
            # Fallback - —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–ø—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            target_clips = 3 if video_duration <= 60 else 5
            analysis_result = create_fallback_highlights(video_duration, target_clips)
        
        highlights = analysis_result.get("highlights", [])
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ highlights
        valid_highlights = []
        for highlight in highlights:
            start_time = highlight.get("start_time", 0)
            end_time = highlight.get("end_time", 20)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ–æ
            if start_time >= video_duration - 5:  # –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –¥–æ –∫–æ–Ω—Ü–∞
                continue
                
            if end_time > video_duration:
                end_time = video_duration
            
            if end_time - start_time < 5:  # –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –∫–ª–∏–ø
                continue
                
            highlight["start_time"] = start_time
            highlight["end_time"] = end_time
            valid_highlights.append(highlight)
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö highlights, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        if not valid_highlights:
            target_clips = 3 if video_duration <= 60 else 5
            clip_duration = min(18, video_duration / target_clips)
            
            for i in range(target_clips):
                start = i * (clip_duration + 2)  # 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∫–ª–∏–ø–∞–º–∏
                end = start + clip_duration
                
                if end > video_duration:
                    end = video_duration
                    start = max(0, end - clip_duration)
                
                if start >= video_duration - 5:
                    break
                    
                valid_highlights.append({
                    "start_time": start,
                    "end_time": end,
                    "title": f"–ö–ª–∏–ø {i+1}",
                    "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª–∏–ø",
                    "keywords": []
                })
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        analysis_tasks[video_id].update({
            "status": "completed",
            "transcript": transcript_data,
            "analysis": {"highlights": valid_highlights},
            "completed_at": datetime.now().isoformat()
        })
        
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {video_id}, –Ω–∞–π–¥–µ–Ω–æ {len(valid_highlights)} highlights")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ {video_id}: {e}")
        analysis_tasks[video_id].update({
            "status": "error",
            "error": str(e),
            "completed_at": datetime.now().isoformat()
        })

@app.get("/api/videos/{video_id}/status")
async def get_video_status(video_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ"""
    if video_id not in analysis_tasks:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    task = analysis_tasks[video_id]
    
    response = {
        "video_id": video_id,
        "status": task["status"],
        "filename": task.get("filename"),
        "duration": task.get("duration"),
        "upload_time": task.get("upload_time")
    }
    
    if task["status"] == "completed":
        highlights = task.get("analysis", {}).get("highlights", [])
        response["highlights"] = highlights
        response["highlights_count"] = len(highlights)
    
    if task["status"] == "error":
        response["error"] = task.get("error")
    
    return response

@app.post("/api/clips/generate")
async def generate_clips(request: ClipGenerationRequest, background_tasks: BackgroundTasks):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–ø–æ–≤ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏"""
    try:
        video_id = request.video_id
        format_id = request.format_id
        style_id = request.style_id
        
        if video_id not in analysis_tasks:
            raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        analysis_task = analysis_tasks[video_id]
        if analysis_task["status"] != "completed":
            raise HTTPException(status_code=400, detail="–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–¥–∞—á–∏
        task_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generation_tasks[task_id] = {
            "task_id": task_id,
            "video_id": video_id,
            "format_id": format_id,
            "style_id": style_id,
            "status": "pending",
            "progress": 0,
            "clips": [],
            "created_at": datetime.now().isoformat()
        }
        
        # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ
        background_tasks.add_task(generate_clips_task, task_id)
        
        logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–ø–æ–≤: {task_id}")
        
        return {
            "task_id": task_id,
            "message": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–ø–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞",
            "video_id": video_id,
            "format_id": format_id,
            "style_id": style_id
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def generate_clips_task(task_id: str):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–æ–≤"""
    try:
        task = generation_tasks[task_id]
        video_id = task["video_id"]
        format_id = task["format_id"]
        style_id = task["style_id"]
        
        analysis_task = analysis_tasks[video_id]
        video_path = analysis_task["video_path"]
        highlights = analysis_task["analysis"]["highlights"]
        transcript_data = analysis_task.get("transcript", {})
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        generation_tasks[task_id]["status"] = "generating"
        
        logger.info(f"üé¨ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {len(highlights)} –∫–ª–∏–ø–æ–≤")
        
        clips_created = 0
        total_clips = len(highlights)
        
        for i, highlight in enumerate(highlights):
            try:
                start_time = highlight["start_time"]
                end_time = highlight["end_time"]
                
                logger.info(f"üé¨ –°–æ–∑–¥–∞—é –∫–ª–∏–ø {i+1}/{total_clips}: {start_time}-{end_time}s")
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress = int((i / total_clips) * 100)
                generation_tasks[task_id]["progress"] = progress
                generation_tasks[task_id]["current_stage"] = f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–∞ {i+1}/{total_clips}"
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤—Ä–µ–º–µ–Ω–∏
                words_in_range = []
                if 'words' in transcript_data:
                    for word_data in transcript_data['words']:
                        word_start = word_data.get('start', 0)
                        word_end = word_data.get('end', 0)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –∫–ª–∏–ø–∞
                        if word_start < end_time and word_end > start_time:
                            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞ –∫–ª–∏–ø–∞
                            adjusted_word = word_data.copy()
                            adjusted_word['start'] = max(0, word_start - start_time)
                            adjusted_word['end'] = min(end_time - start_time, word_end - start_time)
                            words_in_range.append(adjusted_word)
                
                logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(words_in_range)} —Å–ª–æ–≤ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ ASS —Ñ–∞–π–ª–∞
                style_config = Config.ASS_STYLES.get(style_id, Config.ASS_STYLES["modern"])
                ass_filename = f"{task_id}_clip_{i+1}.ass"
                ass_path = os.path.join(Config.ASS_DIR, ass_filename)
                
                if words_in_range:
                    create_ass_subtitle_file(words_in_range, style_config, ass_path)
                else:
                    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π ASS —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ—Ç —Å–ª–æ–≤
                    with open(ass_path, 'w', encoding='utf-8') as f:
                        f.write("""[Script Info]
Title: Empty Subtitles
ScriptType: v4.00+

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&Hffffff,&H00ff00,&H000000,&H80000000,-1,0,0,0,100,100,0,0,1,1,0,2,10,10,60,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
""")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–∞
                clip_filename = f"{task_id}_clip_{i+1}_{format_id.replace(':', 'x')}.mp4"
                clip_path = os.path.join(Config.CLIPS_DIR, clip_filename)
                
                success = create_clip_with_ass_subtitles(
                    video_path, start_time, end_time, format_id, ass_path, clip_path
                )
                
                if success:
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–ø–∞ –≤ Supabase Storage
                    supabase_url = upload_clip_to_supabase(clip_path, clip_filename)
                    
                    clip_info = {
                        "id": f"{task_id}_clip_{i+1}",
                        "title": highlight.get("title", f"–ö–ª–∏–ø {i+1}"),
                        "description": highlight.get("description", ""),
                        "start_time": start_time,
                        "end_time": end_time,
                        "duration": end_time - start_time,
                        "filename": clip_filename,
                        "download_url": supabase_url,
                        "format": format_id,
                        "style": style_id,
                        "size": os.path.getsize(clip_path) if os.path.exists(clip_path) else 0
                    }
                    
                    generation_tasks[task_id]["clips"].append(clip_info)
                    clips_created += 1
                    
                    logger.info(f"‚úÖ –ö–ª–∏–ø {i+1} —Å–æ–∑–¥–∞–Ω: {clip_filename}, —Ä–∞–∑–º–µ—Ä: {clip_info['size']} –±–∞–π—Ç")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞ {i+1}")
                
            except Exception as clip_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞ {i+1}: {clip_error}")
                continue
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generation_tasks[task_id].update({
            "status": "completed",
            "progress": 100,
            "current_stage": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            "clips_created": clips_created,
            "completed_at": datetime.now().isoformat()
        })
        
        logger.info(f"üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task_id}, —Å–æ–∑–¥–∞–Ω–æ {clips_created} –∫–ª–∏–ø–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–æ–≤ {task_id}: {e}")
        generation_tasks[task_id].update({
            "status": "error",
            "error": str(e),
            "completed_at": datetime.now().isoformat()
        })

@app.get("/api/clips/generation/{task_id}/status")
async def get_generation_status(task_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–æ–≤"""
    if task_id not in generation_tasks:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    task = generation_tasks[task_id]
    
    response = {
        "task_id": task_id,
        "status": task["status"],
        "progress": task.get("progress", 0),
        "current_stage": task.get("current_stage"),
        "clips_created": len(task.get("clips", [])),
        "created_at": task.get("created_at")
    }
    
    if task["status"] == "completed":
        response["clips"] = task.get("clips", [])
        response["completed_at"] = task.get("completed_at")
    
    if task["status"] == "error":
        response["error"] = task.get("error")
    
    return response

@app.get("/api/clips/download/{filename}")
async def download_clip(filename: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–ª–∏–ø–∞ (fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è)"""
    file_path = os.path.join(Config.CLIPS_DIR, filename)
    
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return FileResponse(
        file_path,
        media_type="video/mp4",
        filename=filename
    )

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ AgentFlow AI Clips v18.3.0 started!")
    logger.info("üé¨ ASS –∫–∞—Ä–∞–æ–∫–µ-—Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    logger.info("üî• GPU-—É—Å–∫–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ libass")
    logger.info("‚ö° –î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–ø–æ–≤")
    
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)

