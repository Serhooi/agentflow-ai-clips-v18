# AgentFlow AI Clips v18.3.2 - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ï–ô –ò –°–¢–ò–õ–ï–ú OPUS
# –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª–∏–ø–æ–≤ —Å ASS-—Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1080x1920
# –ü–æ–¥—Ä–æ–±–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–¥–µ–∂–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏
# –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: 09:18 PM EDT, 13 –∏—é–ª—è 2025 (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)

import os
import json
import uuid
import asyncio
import logging
import subprocess
import tempfile
import shutil
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from pathlib import Path
import psutil
import time
from collections import deque
import re
import sys
import traceback

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ ShortGPT —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from shortgpt_captions import create_word_level_subtitles
except ImportError as e:
    logger = logging.getLogger("app")
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ shortgpt_captions: {str(e)}")
    sys.exit(1)

from fastapi import FastAPI, File, UploadFile, HTTPException, BackgroundTasks, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import openai
from openai import OpenAI

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Supabase —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º fallback
try:
    from supabase import create_client, Client
    SUPABASE_AVAILABLE = True
except ImportError:
    SUPABASE_AVAILABLE = False
    logger = logging.getLogger("app")
    logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("agentflow.log")
    ]
)
logger = logging.getLogger("app")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
app = FastAPI(
    title="AgentFlow AI Clips API",
    description="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–æ–≤ —Å ASS-—Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –≤ —Å—Ç–∏–ª–µ Opus (1080x1920). –í–µ—Ä—Å–∏—è 18.3.2.",
    version="18.3.2",
    contact={
        "name": "Support Team",
        "email": "support@x.ai",
        "url": "https://x.ai/support"
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT"
    }
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["Content-Type", "Authorization", "X-Requested-With", "*"],
)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
class Config:
    """–ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏, –ª–∏–º–∏—Ç–∞–º–∏ –∏ —Å—Ç–∏–ª—è–º–∏"""
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    UPLOAD_DIR = "uploads"
    AUDIO_DIR = "audio"
    CLIPS_DIR = "clips"
    ASS_DIR = "ass_subtitles"
    FONTS_DIR = "ass_subtitles/fonts"
    
    # –õ–∏–º–∏—Ç—ã —Ä–µ—Å—É—Ä—Å–æ–≤
    MAX_FILE_SIZE = 200 * 1024 * 1024  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 200 MB
    MAX_TASK_AGE = 24 * 60 * 60        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
    CLEANUP_INTERVAL = 3600            # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
    MAX_CONCURRENT_TASKS = 1           # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω—É –∑–∞–¥–∞—á—É
    
    # –°—Ç–∏–ª–∏ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ Opus –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç)
    ASS_STYLES = {
        "opus": {
            "name": "Opus",
            "fontname": "Inter-Bold",
            "fontsize": 48,
            "primarycolor": "&HFFFFFF",  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            "secondarycolor": "&H00FF00",  # –ó–µ–ª–µ–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
            "outlinecolor": "&H000000",  # –ß–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç—É—Ä
            "backcolor": "&HCC000000",  # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —á–µ—Ä–Ω—ã–π (opacity ~80%)
            "outline": 2,
            "shadow": 1,
            "alignment": 2,           # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            "marginl": 100,           # –û—Ç—Å—Ç—É–ø 100 px —Å–ª–µ–≤–∞
            "marginr": 100,           # –û—Ç—Å—Ç—É–ø 100 px —Å–ø—Ä–∞–≤–∞
            "marginv": 1700,          # –û—Ç—Å—Ç—É–ø –æ—Ç –Ω–∏–∑–∞ (250 px –æ—Ç 1920)
            "borderstyle": 1,
            "scalex": 100,
            "scaley": 100,
            "spacing": 0,
            "angle": 0,
            "padding": "24px 16px",   # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π padding
            "border_radius": "16px"    # –ó–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ
        }
    }

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
for directory in [Config.UPLOAD_DIR, Config.AUDIO_DIR, Config.CLIPS_DIR, Config.ASS_DIR, Config.FONTS_DIR]:
    os.makedirs(directory, exist_ok=True)
    logger.debug(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {directory}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
analysis_tasks = {}  # –•—Ä–∞–Ω–∏—Ç –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ
generation_tasks = {}  # –•—Ä–∞–Ω–∏—Ç –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–æ–≤
task_queue = deque(maxlen=Config.MAX_CONCURRENT_TASKS)  # –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
cache = {}  # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
last_cleanup = time.time()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª—é—á–∞
openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    raise ValueError("OPENAI_API_KEY –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã")
client = OpenAI(api_key=openai_api_key)
logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç OpenAI —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–ª—é—á–æ–º")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
supabase = None
service_supabase = None
SUPABASE_BUCKET = "video-results"

def init_supabase() -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ Supabase —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    global supabase, service_supabase
    if not SUPABASE_AVAILABLE:
        logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å Supabase –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        return False
    try:
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_anon_key = os.getenv("SUPABASE_ANON_KEY")
        supabase_service_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
        if not all([supabase_url, supabase_anon_key, supabase_service_key]):
            logger.warning("‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
            return False
        supabase = create_client(supabase_url, supabase_anon_key)
        service_supabase = create_client(supabase_url, supabase_service_key)
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        test_response = supabase.table('test').select('*').limit(1).execute()
        if test_response:
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase Storage —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        else:
            logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –Ω–µ —É–¥–∞–ª—Å—è")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {str(e)}")
        return False

supabase_available = init_supabase()

# –ú–æ–¥–µ–ª–∏ Pydantic –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
class VideoAnalysisRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    video_id: str
    retry_count: Optional[int] = 0

class ClipGenerationRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    video_id: str
    format_id: str
    style_id: str = "opus"
    max_clips: Optional[int] = 3

class VideoInfo(BaseModel):
    """–ú–æ–¥–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    id: str
    filename: str
    duration: float
    size: int
    status: str
    upload_time: str
    resolution: Optional[str] = None

class ClipInfo(BaseModel):
    """–ú–æ–¥–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–ø–µ —Å –¥–µ—Ç–∞–ª—è–º–∏"""
    id: str
    video_id: str
    format_id: str
    style_id: str
    status: str
    progress: int
    current_stage: Optional[str] = None
    stage_progress: Optional[int] = None
    download_url: Optional[str] = None

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
def upload_clip_to_supabase(local_path: str, filename: str) -> Optional[str]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–ø–∞ –≤ Supabase Storage —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if not supabase_available or not service_supabase:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å")
        return f"/api/clips/download/{filename}"
    try:
        with open(local_path, 'rb') as file:
            file_content = file.read()
        storage_path = f"clips/{datetime.now().strftime('%Y%m%d')}/{filename}"
        response = service_supabase.storage.from_(SUPABASE_BUCKET).upload(storage_path, file_content)
        if response:
            public_url = service_supabase.storage.from_(SUPABASE_BUCKET).get_public_url(storage_path)
            logger.info(f"‚úÖ –ö–ª–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase: {storage_path}, URL: {public_url}")
            return public_url
        else:
            logger.warning("‚ö†Ô∏è –û—Ç–≤–µ—Ç Supabase –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase: {str(e)}")
    logger.warning("‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—Ç –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
    return f"/api/clips/download/{filename}"

def get_video_duration(video_path: str) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ffprobe –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º"""
    try:
        cmd = [
            'ffprobe', '-v', 'quiet', '-print_format', 'json',
            '-show_format', '-show_streams', video_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True, timeout=30)
        data = json.loads(result.stdout)
        duration = float(data['format']['duration'])
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        streams = data.get('streams', [])
        resolution = next((s['width'] for s in streams if 'width' in s), 0)
        if video_path in analysis_tasks:
            analysis_tasks[video_path]['resolution'] = f"{resolution}x1920" if resolution else "unknown"
        return duration
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ: {str(e)}")
        return 60.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def ffmpeg_available_codecs() -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–µ–∫–æ–≤ FFmpeg –¥–ª—è GPU-—É—Å–∫–æ—Ä–µ–Ω–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        result = subprocess.run(['ffmpeg', '-codecs'], capture_output=True, text=True, timeout=10)
        codecs = [line.split()[1] for line in result.stdout.splitlines() if 'h264_nvenc' in line or 'libx264' in line]
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–¥–µ–∫–∏ FFmpeg: {codecs}")
        return codecs
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–µ–∫–æ–≤ FFmpeg: {str(e)}")
        return ['libx264']  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–¥–µ–∫

def extract_audio(video_path: str, audio_path: str, start_time: float = 0, duration: float = None) -> bool:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        cmd = [
            'ffmpeg', '-i', video_path, '-vn', '-acodec', 'mp3',
            '-ar', '16000', '-ac', '1', '-y', audio_path
        ]
        if start_time:
            cmd.extend(['-ss', str(start_time)])
        if duration:
            cmd.extend(['-t', str(duration)])
        result = subprocess.run(cmd, capture_output=True, text=True, check=True, timeout=60)
        if os.path.exists(audio_path):
            logger.info(f"üéµ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {audio_path}")
            return True
        else:
            logger.error(f"‚ùå –ê—É–¥–∏–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ: {audio_path}")
            return False
    except subprocess.TimeoutExpired as te:
        logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {str(te)}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {str(e)}")
        return False

def safe_transcribe_audio(audio_path: str) -> Optional[Dict]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    cache_key = f"transcribe_{hash(open(audio_path, 'rb').read())}"
    if cache_key in cache:
        logger.info("üì¶ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –¥–ª—è {cache_key}")
        return cache[cache_key]
    try:
        with open(audio_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="verbose_json",
                timestamp_granularities=["word"],
                language="en"  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            )
            result = transcript.model_dump() if hasattr(transcript, 'model_dump') else dict(transcript)
            cache[cache_key] = result
            logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(result.get('words', []))} —Å–ª–æ–≤")
            return result
    except openai.APIError as ae:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API OpenAI: {str(ae)}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)} —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π {traceback.format_exc()}")
        return None

def analyze_with_chatgpt(transcript_text: str, video_duration: float) -> Optional[Dict]:
    """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Å ChatGPT –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–ª–∏–ø–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    try:
        target_clips = 2 if video_duration <= 30 else 3 if video_duration <= 60 else 4
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {video_duration:.1f} —Å–µ–∫—É–Ω–¥.
        –ù–∞–π–¥–∏ {target_clips} —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∏–ø–æ–≤ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 15-20 —Å–µ–∫—É–Ω–¥, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è).
        –í–µ—Ä–Ω–∏ JSON —Å –∫–ª—é—á–æ–º 'highlights' –∏ –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∏–¥–∞:
        {{
            "start_time": float,
            "end_time": float,
            "title": str,
            "description": str,
            "confidence": float
        }}
        –£–±–µ–¥–∏—Å—å, —á—Ç–æ –º–æ–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç –≤—ã—Å–æ–∫—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–µ—á–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
        """
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1500,
            temperature=0.7,
            timeout=30
        )
        content = response.choices[0].message.content.strip()
        if content.startswith('```json'):
            content = content[7:-3].strip()
        result = json.loads(content)
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ ChatGPT –∑–∞–≤–µ—Ä—à–µ–Ω: {len(result['highlights'])} –∫–ª–∏–ø–æ–≤")
        return result
    except json.JSONDecodeError as je:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {str(je)}")
        return create_fallback_highlights(video_duration, target_clips)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å ChatGPT: {str(e)}")
        return create_fallback_highlights(video_duration, target_clips)

def create_fallback_highlights(video_duration: float, target_clips: int) -> Dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∞—Å–Ω—ã—Ö –∫–ª–∏–ø–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–Ω–∞–ª–∏–∑–∞ —Å –ª–æ–≥–∏–∫–æ–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
    highlights = []
    clip_duration = 18
    gap = 2
    for i in range(target_clips):
        start = i * (clip_duration + gap)
        end = min(start + clip_duration, video_duration)
        if start >= video_duration - 5:
            break
        highlights.append({
            "start_time": start,
            "end_time": end,
            "title": f"–ö–ª–∏–ø {i+1}",
            "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–ø",
            "confidence": 0.5
        })
    logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∑–∞–ø–∞—Å–Ω—ã–µ –∫–ª–∏–ø—ã: {len(highlights)}")
    return {"highlights": highlights}

# –°–∏—Å—Ç–µ–º–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Ä–∞–æ–∫–µ-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤
class ASSKaraokeSubtitleSystem:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ASS-—Ñ–∞–π–ª–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–ª–æ–≤ –≤ —Å—Ç–∏–ª–µ Opus"""
    
    def __init__(self):
        self.styles = {
            "opus": {
                "fontname": "Inter-Bold",
                "fontsize": 48,
                "primarycolor": "&HFFFFFF",
                "secondarycolor": "&H00FF00",
                "outlinecolor": "&H000000",
                "backcolor": "&HCC000000",
                "outline": 2,
                "shadow": 1,
                "alignment": 2,
                "marginl": 100,
                "marginr": 100,
                "marginv": 1700,
                "borderstyle": 1,
                "scalex": 100,
                "scaley": 100,
                "spacing": 0,
                "angle": 0,
                "padding": "24px 16px",
                "border_radius": "16px"
            }
        }
        self.font_path = os.path.join(Config.FONTS_DIR, "Inter-Bold.ttf")
        if not os.path.exists(self.font_path):
            logger.warning(f"‚ö†Ô∏è –®—Ä–∏—Ñ—Ç {self.font_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π")
    
    def generate_ass_file(self, words_data: List[Dict], style: str = "opus", video_duration: float = 10.0) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ASS-—Ñ–∞–π–ª–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞"""
        style_config = self.styles.get(style, self.styles["opus"])
        ass_filename = f"subtitles_{uuid.uuid4().hex[:8]}.ass"
        ass_path = os.path.join(Config.ASS_DIR, ass_filename)
        
        ass_content = "[Script Info]\n"
        ass_content += "Title: AgentFlow AI Clips Opus Subtitles\n"
        ass_content += "ScriptType: v4.00+\n"
        ass_content += "WrapStyle: 2\n"  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫
        ass_content += "PlayResX: 1080\n"  # –¢–æ—á–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        ass_content += "PlayResY: 1920\n"
        ass_content += "ScaledBorderAndShadow: yes\n"
        ass_content += f"FontFile: {self.font_path}\n\n" if os.path.exists(self.font_path) else "\n"
        
        ass_content += "[V4+ Styles]\n"
        ass_content += "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, ScaleX, ScaleY, Spacing, Angle, Encoding\n"
        ass_content += (f"Style: Default,{style_config['fontname']},{style_config['fontsize']},"
                       f"{style_config['primarycolor']},{style_config['secondarycolor']},"
                       f"{style_config['outlinecolor']},{style_config['backcolor']},-1,0,"
                       f"{style_config['borderstyle']},{style_config['outline']},{style_config['shadow']},"
                       f"{style_config['alignment']},{style_config['marginl']},{style_config['marginr']},"
                       f"{style_config['marginv']},{style_config['scalex']},{style_config['scaley']},"
                       f"{style_config['spacing']},{style_config['angle']},1\n\n")
        
        ass_content += "[Events]\n"
        ass_content += "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n"
        
        total_words = len(words_data)
        for i, word_data in enumerate(words_data):
            start_time = self._seconds_to_ass_time(word_data['start'])
            end_time = self._seconds_to_ass_time(word_data['end'])
            word = word_data['word'].strip()
            if not word:
                continue
            duration = max(50, min(500, int((word_data['end'] - word_data['start']) * 1000)))
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å padding –∏ border-radius
            ass_content += (f"Dialogue: 0,{start_time},{end_time},Default,,0,0,0,,"
                           f"{{\pos(540,1700)}}{{\p1}}{{\bord1}}{{\shad1}}{{\3c&HCC000000&}}"
                           f"{{\t(0,0,\c&HFFFFFF&)}}{word}"
                           f"{{\t({duration},\c&H00FF00&)}}{{\p0}}{{\r}}\n")
            logger.debug(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å—É–±—Ç–∏—Ç—Ä –¥–ª—è —Å–ª–æ–≤–∞ '{word}' ({i+1}/{total_words})")
        
        with open(ass_path, 'w', encoding='utf-8') as f:
            f.write(ass_content)
        logger.info(f"‚úÖ ASS-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {ass_path}, —Å–ª–æ–≤: {total_words}")
        return ass_path
    
    def _seconds_to_ass_time(self, seconds: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–µ–∫—É–Ω–¥ –≤ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ ASS —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        if seconds < 0:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {seconds}, –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ 0")
            seconds = 0
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        centiseconds = int((seconds % 1) * 100)
        return f"{hours}:{minutes:02d}:{secs:02d}.{centiseconds:02d}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
ass_subtitle_system = ASSKaraokeSubtitleSystem()

def create_clip_with_ass_subtitles(
    video_path: str, 
    start_time: float, 
    end_time: float, 
    words_data: List[Dict],
    output_path: str,
    format_type: str = "9:16",
    style: str = "opus"
) -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–∞ —Å ASS-—Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1080x1920 —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        logger.info(f"üé¨ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞: {start_time}-{end_time}s, —Å—Ç–∏–ª—å: {style}, —Ñ–∞–π–ª: {output_path}")
        format_type = format_type.replace('_', ':')
        if format_type != "9:16":
            logger.warning(f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç {format_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 9:16")
        
        clip_duration = end_time - start_time
        if clip_duration <= 0:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–ø–∞: {clip_duration}s")
            return False
        
        crop_params = {
            "scale": "1080:1920",
            "crop": "1080:1920:0:0"
        }
        
        clip_words = []
        logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è {len(words_data)} —Å–ª–æ–≤ –¥–ª—è –∫–ª–∏–ø–∞ {start_time}s-{end_time}s")
        for word_data in words_data:
            word_start = word_data['start']
            word_end = word_data['end']
            if word_end > start_time and word_start < end_time:
                clip_word_start = max(0, word_start - start_time)
                clip_word_end = min(clip_duration, word_end - start_time)
                if clip_word_end > clip_word_start:
                    clip_words.append({
                        'word': word_data['word'],
                        'start': clip_word_start,
                        'end': clip_word_end
                    })
                    logger.debug(f"‚úÖ –°–ª–æ–≤–æ '{word_data['word']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ: {clip_word_start:.2f}s-{clip_word_end:.2f}s")
        
        logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(clip_words)} —Å–ª–æ–≤ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
        temp_video_path = output_path.replace('.mp4', '_temp.mp4')
        
        nvenc_available = 'h264_nvenc' in ffmpeg_available_codecs()
        codec = 'h264_nvenc' if nvenc_available else 'libx264'
        logger.info(f"üé¨ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–¥–µ–∫: {codec}")
        
        # –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
        base_cmd = [
            'ffmpeg', '-i', video_path,
            '-ss', str(start_time),
            '-t', str(clip_duration),
            '-vf', f"scale={crop_params['scale']},crop={crop_params['crop']}",
            '-c:v', codec, '-preset', 'ultrafast',
            '-c:a', 'aac', '-b:a', '64k',
            '-y', temp_video_path
        ]
        logger.info("üé¨ –≠–¢–ê–ü 1: –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ")
        result = subprocess.run(base_cmd, capture_output=True, text=True, encoding="utf-8", errors="ignore", timeout=120)
        if result.returncode != 0:
            logger.error(f"‚ùå –≠–¢–ê–ü 1 –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {result.stderr}")
            return False
        logger.info("‚úÖ –≠–¢–ê–ü 1 –∑–∞–≤–µ—Ä—à–µ–Ω: –±–∞–∑–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –≠–¢–ê–ü 2: –ù–∞–ª–æ–∂–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        if clip_words:
            try:
                logger.info("üìù –≠–¢–ê–ü 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ ASS-—Å—É–±—Ç–∏—Ç—Ä–æ–≤")
                ass_path = ass_subtitle_system.generate_ass_file(clip_words, style, clip_duration)
                if not os.path.exists(ass_path):
                    logger.error(f"‚ùå ASS-—Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: {ass_path}")
                    raise Exception("ASS-—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                subtitle_cmd = [
                    'ffmpeg', '-i', temp_video_path,
                    '-vf', f"ass={ass_path}",
                    '-c:v', codec, '-preset', 'ultrafast',
                    '-c:a', 'copy',
                    '-y', output_path
                ]
                logger.info("üìù –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ ASS-—Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∫ –≤–∏–¥–µ–æ")
                result = subprocess.run(subtitle_cmd, capture_output=True, text=True, encoding="utf-8", errors="ignore", timeout=120)
                if result.returncode != 0:
                    logger.error(f"‚ùå –≠–¢–ê–ü 2 –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {result.stderr}")
                    if os.path.exists(temp_video_path):
                        os.rename(temp_video_path, output_path)
                    return True
                logger.info("‚úÖ –≠–¢–ê–ü 2 –∑–∞–≤–µ—Ä—à–µ–Ω: —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞–ª–æ–∂–µ–Ω—ã")
                os.remove(ass_path)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≠–¢–ê–ü–ï 2: {str(e)} —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π {traceback.format_exc()}")
                if os.path.exists(temp_video_path):
                    os.rename(temp_video_path, output_path)
                return True
        else:
            logger.info("‚ö†Ô∏è –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ")
            if os.path.exists(temp_video_path):
                os.rename(temp_video_path, output_path)
        
        # –≠–¢–ê–ü 3: –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if os.path.exists(temp_video_path):
            os.remove(temp_video_path)
            logger.info("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        else:
            logger.warning("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        
        logger.info(f"‚úÖ –ö–ª–∏–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_path}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {clip_duration}s")
        return True
    except subprocess.TimeoutExpired as te:
        logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–ø–∞: {str(te)}")
        if os.path.exists(temp_video_path):
            os.rename(temp_video_path, output_path)
        return False
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞: {str(e)} —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π {traceback.format_exc()}")
        if os.path.exists(temp_video_path):
            os.rename(temp_video_path, output_path)
        return False

def check_memory_available() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    memory = psutil.virtual_memory()
    available_mb = memory.available / (1024 * 1024)
    logger.debug(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–º—è—Ç–∏: {available_mb:.1f} MB –∏–∑ {memory.total / (1024 * 1024):.1f} MB")
    return memory.available > 50 * 1024 * 1024

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API
@app.get("/")
async def root():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å –≤–µ—Ä—Å–∏–µ–π"""
    return {
        "message": "AgentFlow AI Clips API v18.3.2",
        "status": "running",
        "timestamp": datetime.now().isoformat(),
        "version": "18.3.2"
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    return {
        "status": "healthy",
        "version": "18.3.2",
        "timestamp": datetime.now().isoformat(),
        "system": {
            "memory_usage": f"{memory.percent}% ({memory.available / (1024 * 1024):.1f} MB –¥–æ—Å—Ç—É–ø–Ω–æ)",
            "disk_usage": f"{disk.percent}% ({disk.free / (1024 * 1024):.1f} MB —Å–≤–æ–±–æ–¥–Ω–æ)",
            "tasks_running": len(analysis_tasks) + len(generation_tasks),
            "uptime": str(timedelta(seconds=time.time() - os.times()[4]))
        },
        "services": {
            "openai": "connected" if openai_api_key else "disconnected",
            "supabase": "connected" if supabase_available else "disconnected"
        }
    }

@app.post("/api/videos/upload")
async def upload_video(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞–º—è—Ç–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∞"""
    if not check_memory_available():
        raise HTTPException(status_code=503, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    if file.size and file.size > Config.MAX_FILE_SIZE:
        raise HTTPException(status_code=413, detail=f"–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {Config.MAX_FILE_SIZE / (1024 * 1024)} MB")
    video_id = str(uuid.uuid4())
    file_extension = os.path.splitext(file.filename)[1].lower()
    supported_extensions = ['.mp4', '.mov', '.avi', '.mkv']
    if file_extension not in supported_extensions:
        raise HTTPException(status_code=400, detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {', '.join(supported_extensions)}")
    video_path = os.path.join(Config.UPLOAD_DIR, f"{video_id}{file_extension}")
    try:
        with open(video_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)
        duration = get_video_duration(video_path)
        analysis_tasks[video_id] = {
            "video_id": video_id,
            "filename": file.filename,
            "video_path": video_path,
            "duration": duration,
            "size": len(content),
            "status": "uploaded",
            "upload_time": datetime.now().isoformat()
        }
        logger.info(f"üìÅ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename} ({len(content)/1024/1024:.1f} MB)")
        logger.info(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {video_id}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}s")
        return {
            "video_id": video_id,
            "filename": file.filename,
            "duration": duration,
            "size": len(content),
            "upload_time": analysis_tasks[video_id]["upload_time"],
            "status": "uploaded"
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {str(e)}")
        if os.path.exists(video_path):
            os.remove(video_path)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")

@app.post("/api/videos/analyze")
async def analyze_video(request: VideoAnalysisRequest, background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    video_id = request.video_id
    if video_id not in analysis_tasks or not check_memory_available():
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø–∞–º—è—Ç—å –∏—Å—á–µ—Ä–ø–∞–Ω–∞")
    if analysis_tasks[video_id].get("status") in ["analyzing", "completed"]:
        logger.info(f"‚ö†Ô∏è –í–∏–¥–µ–æ {video_id} —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return {"message": "–ê–Ω–∞–ª–∏–∑ —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω", "video_id": video_id}
    background_tasks.add_task(analyze_video_task, video_id, request.retry_count)
    analysis_tasks[video_id]["status"] = "analyzing"
    logger.info(f"üîç –ó–∞–ø—É—â–µ–Ω –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ: {video_id}, –ø–æ–ø—ã—Ç–∫–∞ {request.retry_count}")
    return {"message": "–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω", "video_id": video_id}

async def analyze_video_task(video_id: str, retry_count: int = 0):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
    try:
        analysis_task = analysis_tasks[video_id]
        video_path = analysis_task["video_path"]
        video_duration = analysis_task["duration"]
        logger.info(f"üîç –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ: {video_id}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_duration}s, –ø–æ–ø—ã—Ç–∫–∞ {retry_count}")
        audio_path = os.path.join(Config.AUDIO_DIR, f"{video_id}.mp3")
        if not extract_audio(video_path, audio_path):
            raise Exception("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
        logger.info(f"üéµ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {audio_path}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(audio_path)/1024:.1f} KB")
        transcript_data = safe_transcribe_audio(audio_path)
        if not transcript_data and retry_count < 2:
            logger.warning(f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {retry_count + 1}")
            await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            return await analyze_video_task(video_id, retry_count + 1)
        elif not transcript_data:
            raise Exception("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        logger.info("üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        transcript_text = transcript_data.get('text', '')
        analysis_result = analyze_with_chatgpt(transcript_text, video_duration)
        if not analysis_result:
            analysis_result = create_fallback_highlights(video_duration, 3)
        analysis_tasks[video_id].update({
            "status": "completed",
            "transcript": transcript_data,
            "analysis": analysis_result,
            "completed_at": datetime.now().isoformat()
        })
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {video_id}, –Ω–∞–π–¥–µ–Ω–æ {len(analysis_result['highlights'])} –∫–ª–∏–ø–æ–≤")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ {video_id}: {str(e)} —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π {traceback.format_exc()}")
        analysis_tasks[video_id].update({
            "status": "error",
            "error": str(e),
            "completed_at": datetime.now().isoformat()
        })

@app.get("/api/videos/{video_id}/status")
async def get_video_status(video_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ —Å –¥–µ—Ç–∞–ª—è–º–∏"""
    if video_id not in analysis_tasks:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    task = analysis_tasks[video_id]
    response = {
        "video_id": video_id,
        "status": task["status"],
        "filename": task.get("filename", "unknown"),
        "duration": task.get("duration", 0.0),
        "size": task.get("size", 0),
        "upload_time": task.get("upload_time"),
        "resolution": task.get("resolution", "unknown")
    }
    if task["status"] == "completed":
        response["highlights"] = task.get("analysis", {}).get("highlights", [])
    if task["status"] == "error":
        response["error"] = task.get("error")
    return response

@app.post("/api/clips/generate")
async def generate_clips(request: ClipGenerationRequest, background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –∏ –ª–∏–º–∏—Ç–æ–≤"""
    if not check_memory_available():
        raise HTTPException(status_code=503, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    video_id = request.video_id
    format_id = request.format_id
    style_id = request.style_id
    max_clips = min(request.max_clips, 5)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 5 –∫–ª–∏–ø–æ–≤
    if video_id not in analysis_tasks or analysis_tasks[video_id]["status"] != "completed":
        raise HTTPException(status_code=400, detail="–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
    task_id = str(uuid.uuid4())
    generation_tasks[task_id] = {
        "task_id": task_id,
        "video_id": video_id,
        "format_id": format_id,
        "style_id": style_id,
        "status": "pending",
        "progress": 0,
        "clips": [],
        "max_clips": max_clips,
        "created_at": datetime.now().isoformat()
    }
    task_queue.append(task_id)
    if len(task_queue) > Config.MAX_CONCURRENT_TASKS:
        logger.info(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å, —Ç–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: {len(task_queue)}")
        return {"task_id": task_id, "message": "–ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏"}
    background_tasks.add_task(generate_clips_task, task_id)
    logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–ø–æ–≤: {task_id}, –º–∞–∫—Å–∏–º—É–º {max_clips} –∫–ª–∏–ø–æ–≤")
    return {
        "task_id": task_id,
        "message": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–ø–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞",
        "video_id": video_id,
        "format_id": format_id,
        "style_id": style_id,
        "max_clips": max_clips
    }

async def generate_clips_task(task_id: str):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—á–µ—Ä–µ–¥—å—é –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    if task_queue[0] != task_id:
        logger.info(f"‚ö†Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
        while task_queue[0] != task_id:
            await asyncio.sleep(5)
    task = generation_tasks[task_id]
    video_id = task["video_id"]
    format_id = task["format_id"]
    style_id = task["style_id"]
    max_clips = task["max_clips"]
    analysis_task = analysis_tasks[video_id]
    video_path = analysis_task["video_path"]
    highlights = analysis_task["analysis"]["highlights"][:max_clips]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–ª–∏–ø–æ–≤
    
    generation_tasks[task_id]["status"] = "generating"
    logger.info(f"üé¨ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {len(highlights)} –∫–ª–∏–ø–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
    
    clips_created = 0
    total_clips = len(highlights)
    for i, highlight in enumerate(highlights):
        if not check_memory_available():
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏, –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            break
        logger.info(f"üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–∞ {i+1}/{total_clips}: {highlight['start_time']}-{highlight['end_time']}s")
        progress = int((i / total_clips) * 100)
        generation_tasks[task_id].update({
            "progress": progress,
            "current_stage": f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–∞ {i+1}/{total_clips}",
            "stage_progress": int((i + 1) / total_clips * 100)
        })
        
        audio_path = os.path.join(Config.AUDIO_DIR, f"{task_id}_clip_{i}.mp3")
        if not extract_audio(video_path, audio_path, highlight["start_time"], highlight["end_time"] - highlight["start_time"]):
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–ª—è –∫–ª–∏–ø–∞ {i+1}")
            continue
        clip_transcript = safe_transcribe_audio(audio_path)
        words_in_range = clip_transcript.get('words', []) if clip_transcript else []
        
        logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(words_in_range)} —Å–ª–æ–≤ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∫–ª–∏–ø–∞ {i+1}")
        clip_filename = f"{task_id}_clip_{i+1}_{format_id.replace(':', 'x')}.mp4"
        clip_path = os.path.join(Config.CLIPS_DIR, clip_filename)
        
        success = create_clip_with_ass_subtitles(
            video_path, highlight["start_time"], highlight["end_time"], words_in_range, clip_path, format_id, style_id
        )
        if success:
            supabase_url = upload_clip_to_supabase(clip_path, clip_filename)
            clip_info = {
                "id": f"{task_id}_clip_{i+1}",
                "title": highlight.get("title", f"–ö–ª–∏–ø {i+1}"),
                "description": highlight.get("description", ""),
                "start_time": highlight["start_time"],
                "end_time": highlight["end_time"],
                "duration": highlight["end_time"] - highlight["start_time"],
                "filename": clip_filename,
                "download_url": supabase_url,
                "format": format_id,
                "style": style_id,
                "size": os.path.getsize(clip_path) if os.path.exists(clip_path) else 0,
                "status": "completed"
            }
            generation_tasks[task_id]["clips"].append(clip_info)
            clips_created += 1
            logger.info(f"‚úÖ –ö–ª–∏–ø {i+1} —Å–æ–∑–¥–∞–Ω: {clip_filename}, —Ä–∞–∑–º–µ—Ä: {clip_info['size']} –±–∞–π—Ç")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞ {i+1}")
    
    generation_tasks[task_id].update({
        "status": "completed",
        "progress": 100,
        "current_stage": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
        "stage_progress": 100,
        "clips_created": clips_created,
        "completed_at": datetime.now().isoformat()
    })
    task_queue.popleft()
    logger.info(f"üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task_id}, —Å–æ–∑–¥–∞–Ω–æ {clips_created} –∏–∑ {total_clips} –∫–ª–∏–ø–æ–≤")

@app.get("/api/clips/generation/{task_id}/status")
async def get_generation_status(task_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏"""
    if task_id not in generation_tasks:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    task = generation_tasks[task_id]
    response = {
        "task_id": task_id,
        "status": task["status"],
        "progress": task.get("progress", 0),
        "current_stage": task.get("current_stage", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        "stage_progress": task.get("stage_progress", 0),
        "clips_created": len(task.get("clips", [])),
        "max_clips": task.get("max_clips", 0),
        "created_at": task.get("created_at"),
        "completed_at": task.get("completed_at")
    }
    if task["status"] == "completed":
        response["clips"] = task.get("clips", [])
    return response

@app.get("/api/clips/download/{filename}")
async def download_clip(filename: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–ø–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    file_path = os.path.join(Config.CLIPS_DIR, filename)
    if not os.path.exists(file_path):
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    logger.info(f"üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {filename}")
    return FileResponse(
        file_path,
        media_type="video/mp4",
        filename=filename
    )

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –∏ —Ñ–∞–π–ª–æ–≤
def cleanup_old_tasks():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    global last_cleanup
    current_time = time.time()
    if current_time - last_cleanup < Config.CLEANUP_INTERVAL:
        return
    for task_id in list(analysis_tasks.keys()):
        task = analysis_tasks[task_id]
        if task.get("status") in ["error", "completed"]:
            upload_time = datetime.fromisoformat(task.get("upload_time"))
            if (current_time - upload_time.timestamp()) > Config.MAX_TASK_AGE:
                video_path = task.get("video_path")
                if video_path and os.path.exists(video_path):
                    os.remove(video_path)
                    logger.info(f"üóë –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {video_path}")
                del analysis_tasks[task_id]
                logger.info(f"üóë –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞: {task_id}")
    for task_id in list(generation_tasks.keys()):
        task = generation_tasks[task_id]
        if task.get("status") == "completed":
            created_at = datetime.fromisoformat(task.get("created_at"))
            if (current_time - created_at.timestamp()) > Config.MAX_TASK_AGE:
                for clip in task.get("clips", []):
                    clip_path = os.path.join(Config.CLIPS_DIR, clip["filename"])
                    if os.path.exists(clip_path):
                        os.remove(clip_path)
                        logger.info(f"üóë –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–ª–∏–ø: {clip_path}")
                del generation_tasks[task_id]
                logger.info(f"üóë –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {task_id}")
    last_cleanup = current_time
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
