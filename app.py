#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
AgentFlow AI Clips API v21.0.0
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å Whisper.cpp –∏ —Å–∏—Å—Ç–µ–º–æ–π –æ—á–µ—Ä–µ–¥–µ–π
"""

import os
import json
import uuid
import time
import logging
import asyncio
import subprocess
from datetime import datetime
from typing import Dict, List, Optional, Any, Union

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger("app")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
from openai import OpenAI

# Faster-Whisper (Whisper.cpp) –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
from faster_whisper import WhisperModel

# Supabase (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    from supabase import create_client, Client
    SUPABASE_AVAILABLE = True
    logger.info("üì¶ Supabase –¥–æ—Å—Ç—É–ø–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
except ImportError:
    SUPABASE_AVAILABLE = False
    logger.warning("‚ö†Ô∏è Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
from fastapi import FastAPI, UploadFile, File, Form, BackgroundTasks, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse, JSONResponse
from pydantic import BaseModel

app = FastAPI(
    title="AgentFlow AI Clips API",
    description="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª–∏–ø–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π",
    version="21.0.0"
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = "uploads"
AUDIO_DIR = "audio"
RESULTS_DIR = "results"
CLIPS_DIR = "clips"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
for dir_path in [UPLOAD_DIR, AUDIO_DIR, RESULTS_DIR, CLIPS_DIR]:
    os.makedirs(dir_path, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai_api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=openai_api_key)
logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase = None
service_supabase = None
SUPABASE_BUCKET = "video-results"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å Whisper.cpp
whisper_model = None

# –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π
processing_semaphore = asyncio.Semaphore(1)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 1 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
task_queue = {}  # –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
task_status = {}  # –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á

def init_supabase():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    global supabase, service_supabase
    
    if not SUPABASE_AVAILABLE:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        return False
    
    try:
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_anon_key = os.getenv("SUPABASE_ANON_KEY")
        supabase_service_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
        
        if not all([supabase_url, supabase_anon_key]):
            logger.warning("‚ö†Ô∏è –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ Supabase –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            logger.info(f"SUPABASE_URL: {'‚úÖ' if supabase_url else '‚ùå'}")
            logger.info(f"SUPABASE_ANON_KEY: {'‚úÖ' if supabase_anon_key else '‚ùå'}")
            logger.info(f"SUPABASE_SERVICE_ROLE_KEY: {'‚úÖ' if supabase_service_key else '‚ùå'}")
            return False
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è v1.0.4
        supabase = create_client(supabase_url, supabase_anon_key)
        
        # Service role –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if supabase_service_key:
            service_supabase = create_client(supabase_url, supabase_service_key)
        else:
            service_supabase = supabase  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç
        
        logger.info("‚úÖ Supabase Storage –ø–æ–¥–∫–ª—é—á–µ–Ω")
        logger.info(f"üìç URL: {supabase_url}")
        logger.info(f"üì¶ –í–µ—Ä—Å–∏—è: supabase==1.0.4 (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è)")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ Supabase
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
supabase_available = init_supabase()

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global whisper_model
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ Whisper.cpp –º–æ–¥–µ–ª–∏...")
        whisper_model = WhisperModel("tiny", device="cpu", compute_type="int8")
        logger.info("‚úÖ Whisper.cpp –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper.cpp –º–æ–¥–µ–ª–∏: {e}")
    
    logger.info("üöÄ AgentFlow AI Clips v21.0.0 started!")
    logger.info("üé¨ Whisper.cpp + –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
    logger.info("üî• –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Render.com")
    logger.info("‚ö° –°—Ç–∞–±–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ")

# Pydantic –º–æ–¥–µ–ª–∏
class VideoAnalysisRequest(BaseModel):
    video_id: str

class ClipGenerationRequest(BaseModel):
    video_id: str
    format_id: str
    style_id: str = "modern"
    highlight_index: int = 0  # –ò–Ω–¥–µ–∫—Å highlight –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0-4)

class VideoInfo(BaseModel):
    id: str
    filename: str
    duration: float
    size: int
    status: str
    upload_time: str

class ClipInfo(BaseModel):
    id: str
    video_id: str
    format_id: str
    style_id: str
    status: str
    progress: int
    current_stage: Optional[str] = None
    stage_progress: Optional[int] = None

def upload_clip_to_supabase(local_path: str, filename: str) -> Optional[str]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–ø–∞ –≤ Supabase Storage"""
    if not supabase_available or not service_supabase:
        logger.warning("‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å")
        return f"/api/clips/download/{filename}"
    
    try:
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        with open(local_path, 'rb') as file:
            file_content = file.read()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Supabase Storage
        storage_path = f"clips/{datetime.now().strftime('%Y%m%d')}/{filename}"
        
        try:
            response = service_supabase.storage.from_(SUPABASE_BUCKET).upload(
                storage_path, 
                file_content,
                file_options={"content-type": "video/mp4"}
            )
            
            if response:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
                public_url = service_supabase.storage.from_(SUPABASE_BUCKET).get_public_url(storage_path)
                logger.info(f"‚úÖ –ö–ª–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase: {storage_path}")
                return public_url
                
        except Exception as upload_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {upload_error}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
            try:
                response = service_supabase.storage.from_(SUPABASE_BUCKET).upload(
                    storage_path, 
                    file_content
                )
                
                if response:
                    public_url = service_supabase.storage.from_(SUPABASE_BUCKET).get_public_url(storage_path)
                    logger.info(f"‚úÖ –ö–ª–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±): {storage_path}")
                    return public_url
                    
            except Exception as alt_error:
                logger.error(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {alt_error}")
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase: {e}")
    
    # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
    logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ")
    return f"/api/clips/download/{filename}"

def get_video_duration(video_path: str) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
    try:
        cmd = [
            'ffprobe', '-v', 'quiet', '-print_format', 'json', 
            '-show_format', video_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        data = json.loads(result.stdout)
        return float(data['format']['duration'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ: {e}")
        return 60.0  # Fallback

def extract_audio(video_path: str, audio_path: str) -> bool:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ"""
    try:
        cmd = [
            'ffmpeg', '-i', video_path, '-vn', '-acodec', 'mp3', 
            '-ar', '16000', '-ac', '1', '-y', audio_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return os.path.exists(audio_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        return False

def get_audio_duration(audio_path: str) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ"""
    try:
        cmd = [
            'ffprobe', '-v', 'quiet', '-print_format', 'json', 
            '-show_format', audio_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        data = json.loads(result.stdout)
        return float(data['format']['duration'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ: {e}")
        return 60.0  # Fallback

async def transcribe_audio(audio_path: str) -> dict:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å Whisper.cpp"""
    global whisper_model
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
        audio_duration = get_audio_duration(audio_path)
        if audio_duration > 600:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç
            logger.warning(f"‚ö†Ô∏è –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {audio_duration} —Å–µ–∫—É–Ω–¥")
            return {"error": "Audio too long", "segments": []}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        if whisper_model is None:
            logger.error("‚ùå Whisper.cpp –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return {"error": "Whisper model not loaded", "segments": []}
        
        logger.info("üîÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å Whisper.cpp...")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        segments, info = whisper_model.transcribe(
            audio_path, 
            beam_size=1, 
            word_timestamps=True,
            max_initial_timestamp=audio_duration
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π JSON
        result = {"segments": []}
        for segment in segments:
            words = [{"word": w.word, "start": w.start, "end": w.end} for w in segment.words]
            result["segments"].append({
                "text": segment.text,
                "start": segment.start,
                "end": segment.end,
                "words": words
            })
        
        logger.info(f"‚úÖ Whisper.cpp —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(result['segments'])} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        return result
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –æ—à–∏–±–∫–æ–π, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        return {"error": str(e), "segments": []}

async def analyze_with_chatgpt(transcript_text: str, video_duration: float) -> Optional[Dict]:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Å ChatGPT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 3-5 –∫–ª–∏–ø–æ–≤"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
        if video_duration <= 30:
            target_clips = 2
        elif video_duration <= 60:
            target_clips = 3
        elif video_duration <= 120:
            target_clips = 4
        else:
            target_clips = 5
        
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {video_duration:.1f} —Å–µ–∫—É–Ω–¥ –∏ –Ω–∞–π–¥–∏ {target_clips} —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª–∏–ø–æ–≤.

–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {transcript_text}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –°–æ–∑–¥–∞–π –†–û–í–ù–û {target_clips} –∫–ª–∏–ø–æ–≤
2. –ö–∞–∂–¥—ã–π –∫–ª–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 15-20 —Å–µ–∫—É–Ω–¥
3. –ö–ª–∏–ø—ã –ù–ï –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
4. –í—ã–±–∏—Ä–∞–π —Å–∞–º—ã–µ —è—Ä–∫–∏–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
5. –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–∞–ª–æ, —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∫–ª–∏–ø—ã –ø–æ –≤—Å–µ–º—É –≤–∏–¥–µ–æ
6. –í—Ä–µ–º—è –∫–ª–∏–ø–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0-{video_duration:.1f} —Å–µ–∫—É–Ω–¥

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "highlights": [
        {{
            "start_time": 0,
            "end_time": 18,
            "title": "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫",
            "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è",
            "keywords": ["–∫–ª—é—á–µ–≤–æ–µ", "—Å–ª–æ–≤–æ"]
        }},
        {{
            "start_time": 20,
            "end_time": 38,
            "title": "–í—Ç–æ—Ä–æ–π –º–æ–º–µ–Ω—Ç",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∏–ø–∞",
            "keywords": ["–¥—Ä—É–≥–∏–µ", "—Å–ª–æ–≤–∞"]
        }}
    ]
}}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!
"""
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1500,
            temperature=0.7
        )
        
        content = response.choices[0].message.content.strip()
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if content.startswith('```json'):
            content = content[7:]
        if content.endswith('```'):
            content = content[:-3]
        content = content.strip()
        
        try:
            result = json.loads(content)
            highlights = result.get("highlights", [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–ø–æ–≤
            if len(highlights) < target_clips:
                logger.warning(f"ChatGPT –≤–µ—Ä–Ω—É–ª —Ç–æ–ª—å–∫–æ {len(highlights)} –∫–ª–∏–ø–æ–≤ –≤–º–µ—Å—Ç–æ {target_clips}")
                # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                while len(highlights) < target_clips:
                    last_end = highlights[-1]["end_time"] if highlights else 0
                    if last_end + 20 <= video_duration:
                        highlights.append({
                            "start_time": last_end + 2,
                            "end_time": min(last_end + 20, video_duration),
                            "title": f"–ö–ª–∏–ø {len(highlights) + 1}",
                            "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–ø",
                            "keywords": []
                        })
                    else:
                        break
            
            return {"highlights": highlights}
            
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç ChatGPT: {e}")
            logger.error(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {content}")
            
            # Fallback - —Å–æ–∑–¥–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–ø—ã
            return create_fallback_highlights(video_duration, target_clips)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å ChatGPT: {e}")
        return create_fallback_highlights(video_duration, 3)

def create_fallback_highlights(video_duration: float, target_clips: int) -> Dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–ª–∏–ø–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    highlights = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–ø–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–ª–∏–ø–∞–º–∏
    clip_duration = min(20.0, video_duration / target_clips)
    interval = (video_duration - (clip_duration * target_clips)) / (target_clips + 1)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–ø—ã
    for i in range(target_clips):
        start_time = interval * (i + 1) + clip_duration * i
        end_time = start_time + clip_duration
        
        highlights.append({
            "start_time": start_time,
            "end_time": end_time,
            "title": f"–ö–ª–∏–ø {i + 1}",
            "description": f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª–∏–ø {i + 1}",
            "keywords": []
        })
    
    return {"highlights": highlights}

async def process_video(video_id: str) -> dict:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π –∏ –∞–Ω–∞–ª–∏–∑–æ–º"""
    try:
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        video_path = os.path.join(UPLOAD_DIR, f"{video_id}.mp4")
        audio_path = os.path.join(AUDIO_DIR, f"{video_id}.mp3")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        if not os.path.exists(video_path):
            logger.error(f"‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {video_path}")
            return {"error": "Video not found"}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        video_duration = get_video_duration(video_path)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
        logger.info("üîÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...")
        if not extract_audio(video_path, audio_path):
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
            return {"error": "Audio extraction failed"}
        
        logger.info(f"üéµ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {audio_path}")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ
        logger.info("üîÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ...")
        transcript = await transcribe_audio(audio_path)
        
        if "error" in transcript and not transcript.get("segments"):
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {transcript['error']}")
            return {"error": transcript["error"]}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        transcript_path = os.path.join(RESULTS_DIR, f"{video_id}_transcript.json")
        with open(transcript_path, 'w', encoding='utf-8') as f:
            json.dump(transcript, f, ensure_ascii=False, indent=2)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        transcript_text = " ".join([segment["text"] for segment in transcript["segments"]])
        
        # –ê–Ω–∞–ª–∏–∑ —Å ChatGPT
        logger.info("üîÑ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ —Å ChatGPT...")
        analysis = await analyze_with_chatgpt(transcript_text, video_duration)
        
        if not analysis or "error" in analysis:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis.get('error', 'Unknown error')}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback
            analysis = create_fallback_highlights(video_duration, 3)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        analysis_path = os.path.join(RESULTS_DIR, f"{video_id}_analysis.json")
        with open(analysis_path, 'w', encoding='utf-8') as f:
            json.dump(analysis, f, ensure_ascii=False, indent=2)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω: {video_id}")
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ {video_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        return {
            "transcript": transcript,
            "highlights": analysis.get("highlights", [])
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
        return {"error": str(e)}

async def process_video_task(video_id: str):
    """–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏"""
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    task_status[video_id] = {
        "status": "processing",
        "progress": 10,
        "message": "–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        async with processing_semaphore:
            logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {video_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            task_status[video_id] = {
                "status": "processing",
                "progress": 20,
                "message": "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ..."
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            result = await process_video(video_id)
            
            if "error" in result:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –æ—à–∏–±–∫–æ–π
                task_status[video_id] = {
                    "status": "error",
                    "progress": 100,
                    "message": f"–û—à–∏–±–∫–∞: {result['error']}"
                }
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ {video_id}: {result['error']}")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —É—Å–ø–µ—Ö–æ–º
                task_status[video_id] = {
                    "status": "completed",
                    "progress": 100,
                    "message": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                    "result": result
                }
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ {video_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    except Exception as e:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –æ—à–∏–±–∫–æ–π
        task_status[video_id] = {
            "status": "error",
            "progress": 100,
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ {video_id}: {e}")

@app.post("/api/videos/upload")
async def upload_video(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        video_id = str(uuid.uuid4())
        
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        video_path = os.path.join(UPLOAD_DIR, f"{video_id}.mp4")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(video_path, "wb") as buffer:
            buffer.write(await file.read())
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        file_size = os.path.getsize(video_path)
        duration = get_video_duration(video_path)
        
        logger.info(f"üìÅ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename} ({file_size / 1024 / 1024:.1f} MB)")
        logger.info(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {video_id}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}s")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        return {
            "video_id": video_id,
            "filename": file.filename,
            "duration": duration,
            "size": file_size,
            "upload_time": datetime.now().isoformat()
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/videos/analyze")
async def analyze_video(request: VideoAnalysisRequest, background_tasks: BackgroundTasks):
    """–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–µ–π"""
    video_id = request.video_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    video_path = os.path.join(UPLOAD_DIR, f"{video_id}.mp4")
    if not os.path.exists(video_path):
        raise HTTPException(status_code=404, detail="Video not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –≤–∏–¥–µ–æ
    if video_id in task_status:
        status = task_status[video_id]["status"]
        if status == "processing":
            return {"status": "processing", "message": "–í–∏–¥–µ–æ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"}
        elif status == "completed":
            return {"status": "completed", "message": "–í–∏–¥–µ–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    logger.info(f"üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ: {video_id}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
    task_status[video_id] = {
        "status": "queued",
        "progress": 0,
        "message": "–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É"
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(process_video_task, video_id)
    
    return {"status": "queued", "video_id": video_id, "message": "–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É"}

@app.get("/api/videos/{video_id}/status")
async def get_video_status(video_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    video_path = os.path.join(UPLOAD_DIR, f"{video_id}.mp4")
    if not os.path.exists(video_path):
        raise HTTPException(status_code=404, detail="Video not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ—á–µ—Ä–µ–¥–∏
    if video_id not in task_status:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        transcript_path = os.path.join(RESULTS_DIR, f"{video_id}_transcript.json")
        analysis_path = os.path.join(RESULTS_DIR, f"{video_id}_analysis.json")
        
        if os.path.exists(transcript_path) and os.path.exists(analysis_path):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            with open(transcript_path, 'r', encoding='utf-8') as f:
                transcript = json.load(f)
            
            with open(analysis_path, 'r', encoding='utf-8') as f:
                analysis = json.load(f)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            task_status[video_id] = {
                "status": "completed",
                "progress": 100,
                "message": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                "result": {
                    "transcript": transcript,
                    "highlights": analysis.get("highlights", [])
                }
            }
        else:
            # –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
            return {
                "status": "unknown",
                "video_id": video_id,
                "message": "–í–∏–¥–µ–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ —É—Ç–µ—Ä—è–Ω–∞"
            }
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    status_data = task_status[video_id]
    
    # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if status_data.get("status") == "completed" and "result" in status_data:
        result = status_data["result"]
        return {
            "status": "completed",
            "video_id": video_id,
            "transcript": result.get("transcript", {"segments": []}),
            "highlights": result.get("highlights", [])
        }
    
    # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    return status_data

@app.get("/api/videos/{video_id}/transcript")
async def get_video_transcript(video_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –≤–∏–¥–µ–æ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    if video_id in task_status:
        status_data = task_status[video_id]
        if status_data.get("status") == "completed" and "result" in status_data:
            result = status_data["result"]
            return result.get("transcript", {"segments": []})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
    transcript_path = os.path.join(RESULTS_DIR, f"{video_id}_transcript.json")
    if os.path.exists(transcript_path):
        with open(transcript_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    raise HTTPException(status_code=404, detail="Transcript not found")

@app.get("/api/videos/{video_id}/highlights")
async def get_video_highlights(video_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –≤–∏–¥–µ–æ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    if video_id in task_status:
        status_data = task_status[video_id]
        if status_data.get("status") == "completed" and "result" in status_data:
            result = status_data["result"]
            return {"highlights": result.get("highlights", [])}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    analysis_path = os.path.join(RESULTS_DIR, f"{video_id}_analysis.json")
    if os.path.exists(analysis_path):
        with open(analysis_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    raise HTTPException(status_code=404, detail="Highlights not found")

@app.get("/api/videos/{video_id}/download")
async def download_video(video_id: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    video_path = os.path.join(UPLOAD_DIR, f"{video_id}.mp4")
    if not os.path.exists(video_path):
        raise HTTPException(status_code=404, detail="Video not found")
    
    return FileResponse(
        path=video_path,
        filename=f"{video_id}.mp4",
        media_type="video/mp4"
    )

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return {
        "status": "ok",
        "version": "21.0.0",
        "timestamp": datetime.now().isoformat(),
        "whisper_model": "tiny" if whisper_model is not None else None,
        "supabase_available": supabase_available,
        "queue_size": len(task_status),
        "processing_tasks": sum(1 for status in task_status.values() 
                               if status.get("status") == "processing"),
        "queued_tasks": sum(1 for status in task_status.values() 
                           if status.get("status") == "queued")
    }

# ASS —Å—É–±—Ç–∏—Ç—Ä—ã endpoints
@app.get("/api/videos/{video_id}/subtitles/ass")
async def get_video_ass_subtitles(video_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ASS —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    if video_id not in task_status or task_status[video_id].get("status") != "completed":
        raise HTTPException(status_code=404, detail="Video processing not completed")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        transcript_path = os.path.join(RESULTS_DIR, f"{video_id}_transcript.json")
        if not os.path.exists(transcript_path):
            raise HTTPException(status_code=404, detail="Transcript not found")
        
        with open(transcript_path, 'r', encoding='utf-8') as f:
            transcript = json.load(f)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ASS —Å—É–±—Ç–∏—Ç—Ä—ã
        from ass_generator import ASSGenerator
        ass_generator = ASSGenerator()
        
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        ass_path = os.path.join(RESULTS_DIR, f"{video_id}.ass")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        ass_content = ass_generator.generate_from_whisper(transcript)
        with open(ass_path, 'w', encoding='utf-8') as f:
            f.write(ass_content)
        
        return FileResponse(
            path=ass_path,
            filename=f"{video_id}.ass",
            media_type="text/plain"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ASS —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–ø–æ–≤
@app.post("/api/clips/generate")
async def generate_clip(request: ClipGenerationRequest):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–ø–∞ –∏–∑ –≤–∏–¥–µ–æ"""
    video_id = request.video_id
    format_id = request.format_id
    style_id = request.style_id
    
    try:
        logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–ø–∞ –¥–ª—è –≤–∏–¥–µ–æ {video_id}, —Ñ–æ—Ä–º–∞—Ç {format_id}, —Å—Ç–∏–ª—å {style_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        video_path = os.path.join(UPLOAD_DIR, f"{video_id}.mp4")
        if not os.path.exists(video_path):
            logger.error(f"‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {video_path}")
            raise HTTPException(status_code=404, detail="Video not found")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if video_id not in task_status:
            logger.error(f"‚ùå –í–∏–¥–µ–æ {video_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö –∑–∞–¥–∞—á")
            raise HTTPException(status_code=400, detail="Video not found in task status")
        
        if task_status[video_id].get("status") != "completed":
            current_status = task_status[video_id].get("status", "unknown")
            logger.error(f"‚ùå –í–∏–¥–µ–æ {video_id} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}")
            raise HTTPException(status_code=400, detail=f"Video processing not completed. Status: {current_status}")
        
        logger.info(f"‚úÖ –í–∏–¥–µ–æ {video_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø–æ–ª—É—á–∞–µ–º highlights")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        task_result = task_status[video_id].get("result", {})
        highlights = task_result.get("highlights", [])
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(highlights)} highlights –≤ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–¥–∞—á–∏")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
        if not highlights:
            logger.info("üîç Highlights –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç–∞—Ç—É—Å–µ, –∏—â–µ–º –≤ —Ñ–∞–π–ª–µ...")
            analysis_path = os.path.join(RESULTS_DIR, f"{video_id}_analysis.json")
            if os.path.exists(analysis_path):
                with open(analysis_path, 'r', encoding='utf-8') as f:
                    analysis = json.load(f)
                highlights = analysis.get("highlights", [])
                logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(highlights)} highlights –≤ —Ñ–∞–π–ª–µ")
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {analysis_path}")
        if not highlights:
            raise HTTPException(status_code=404, detail="No highlights found")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–ø –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ highlight
        highlight_index = request.highlight_index
        if highlight_index >= len(highlights):
            logger.warning(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å {highlight_index} –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ highlights {len(highlights)}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π")
            highlight_index = len(highlights) - 1
        
        highlight = highlights[highlight_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ highlight —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
        if isinstance(highlight, str):
            logger.error(f"‚ùå Highlight —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç–æ–º: {highlight}")
            raise HTTPException(status_code=500, detail="Invalid highlight format")
        
        if not isinstance(highlight, dict):
            logger.error(f"‚ùå Highlight –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(highlight)}")
            raise HTTPException(status_code=500, detail="Invalid highlight format")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if "start_time" not in highlight or "end_time" not in highlight:
            logger.error(f"‚ùå Highlight –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç start_time –∏–ª–∏ end_time: {highlight}")
            raise HTTPException(status_code=500, detail="Missing time fields in highlight")
        
        start_time = highlight["start_time"]
        end_time = highlight["end_time"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º–µ–Ω–∞ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
        if not isinstance(start_time, (int, float)) or not isinstance(end_time, (int, float)):
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ highlight: start={start_time}, end={end_time}")
            raise HTTPException(status_code=500, detail="Invalid time values in highlight")
        
        logger.info(f"üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–ø #{highlight_index + 1} –∏–∑ {len(highlights)}: {start_time}s - {end_time}s")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–ª–∏–ø–∞
        clip_id = str(uuid.uuid4())
        
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        clip_path = os.path.join(CLIPS_DIR, f"{clip_id}.mp4")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        transcript_segments = task_result.get("transcript", [])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞
        clip_segments = []
        for segment in transcript_segments:
            seg_start = segment.get("start", 0)
            seg_end = segment.get("end", 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –∫–ª–∏–ø–æ–º
            if seg_end > start_time and seg_start < end_time:
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞ –∫–ª–∏–ø–∞
                adjusted_segment = {
                    "start": max(0, seg_start - start_time),
                    "end": min(end_time - start_time, seg_end - start_time),
                    "text": segment.get("text", "")
                }
                clip_segments.append(adjusted_segment)
        
        logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(clip_segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è –∫–ª–∏–ø–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã —Å –∫–∞—Ä–∞–æ–∫–µ-—ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        subtitle_filter = ""
        if clip_segments:
            subtitle_filter = create_subtitle_filter(clip_segments, style_id)
            logger.info(f"‚ú® –°–æ–∑–¥–∞–Ω —Ñ–∏–ª—å—Ç—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {len(subtitle_filter)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ 9:16
        crop_filter = ""
        if format_id == "9:16":
            crop_filter = "scale=1080:1920:force_original_aspect_ratio=increase,crop=1080:1920"
        elif format_id == "16:9":
            crop_filter = "scale=1920:1080:force_original_aspect_ratio=increase,crop=1920:1080"
        elif format_id == "1:1":
            crop_filter = "scale=1080:1080:force_original_aspect_ratio=increase,crop=1080:1080"
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        video_filter = ""
        if crop_filter and subtitle_filter:
            video_filter = f"{crop_filter},{subtitle_filter}"
        elif crop_filter:
            video_filter = crop_filter
        elif subtitle_filter:
            video_filter = subtitle_filter
        
        # –ö–æ–º–∞–Ω–¥–∞ FFmpeg –¥–ª—è –≤—ã—Ä–µ–∑–∞–Ω–∏—è –∫–ª–∏–ø–∞ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
        cmd = [
            'ffmpeg', '-i', video_path,
            '-ss', str(start_time),
            '-to', str(end_time),
            '-c:v', 'libx264', '-c:a', 'aac',
            '-strict', 'experimental',
            '-b:a', '128k'
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∏–ª—å—Ç—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if video_filter:
            cmd.extend(['-vf', video_filter])
        
        cmd.extend(['-y', clip_path])
        
        logger.info(f"üé¨ –ö–æ–º–∞–Ω–¥–∞ FFmpeg: {' '.join(cmd[:10])}...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º FFmpeg
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if not os.path.exists(clip_path):
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–∞: {result.stderr}")
            raise HTTPException(status_code=500, detail="Clip generation failed")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        clip_url = upload_clip_to_supabase(clip_path, f"{clip_id}.mp4")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–ø–µ
        result = {
            "clip_id": clip_id,
            "video_id": video_id,
            "format_id": format_id,
            "style_id": style_id,
            "start_time": start_time,
            "end_time": end_time,
            "duration": end_time - start_time,
            "title": highlight.get("title", "–ö–ª–∏–ø"),
            "description": highlight.get("description", ""),
            "url": clip_url
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–ø
        global last_generated_clip
        last_generated_clip = result.copy()
        
        logger.info(f"‚úÖ –ö–ª–∏–ø —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {clip_id}")
        logger.info(f"üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/clips/generate-all")
async def generate_all_clips(request: ClipGenerationRequest):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–ª–∏–ø–æ–≤ –∏–∑ –≤–∏–¥–µ–æ"""
    video_id = request.video_id
    format_id = request.format_id
    style_id = request.style_id
    
    try:
        logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–ª–∏–ø–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ {video_id}, —Ñ–æ—Ä–º–∞—Ç {format_id}, —Å—Ç–∏–ª—å {style_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        video_path = os.path.join(UPLOAD_DIR, f"{video_id}.mp4")
        if not os.path.exists(video_path):
            logger.error(f"‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {video_path}")
            raise HTTPException(status_code=404, detail="Video not found")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if video_id not in task_status:
            logger.error(f"‚ùå –í–∏–¥–µ–æ {video_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö –∑–∞–¥–∞—á")
            raise HTTPException(status_code=400, detail="Video not found in task status")
        
        if task_status[video_id].get("status") != "completed":
            current_status = task_status[video_id].get("status", "unknown")
            logger.error(f"‚ùå –í–∏–¥–µ–æ {video_id} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}")
            raise HTTPException(status_code=400, detail=f"Video processing not completed. Status: {current_status}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
        task_result = task_status[video_id].get("result", {})
        highlights = task_result.get("highlights", [])
        
        if not highlights:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
            analysis_path = os.path.join(RESULTS_DIR, f"{video_id}_analysis.json")
            if os.path.exists(analysis_path):
                with open(analysis_path, 'r', encoding='utf-8') as f:
                    analysis = json.load(f)
                highlights = analysis.get("highlights", [])
        
        if not highlights:
            raise HTTPException(status_code=404, detail="No highlights found")
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(highlights)} highlights –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–ª–∏–ø—ã
        generated_clips = []
        transcript_segments = task_result.get("transcript", [])
        
        for i, highlight in enumerate(highlights):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ highlight —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
                if isinstance(highlight, str):
                    logger.error(f"‚ùå Highlight #{i + 1} —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç–æ–º: {highlight}")
                    continue
                
                if not isinstance(highlight, dict):
                    logger.error(f"‚ùå Highlight #{i + 1} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(highlight)}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                if "start_time" not in highlight or "end_time" not in highlight:
                    logger.error(f"‚ùå Highlight #{i + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç start_time –∏–ª–∏ end_time: {highlight}")
                    continue
                
                start_time = highlight["start_time"]
                end_time = highlight["end_time"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º–µ–Ω–∞ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
                if not isinstance(start_time, (int, float)) or not isinstance(end_time, (int, float)):
                    logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ highlight #{i + 1}: start={start_time}, end={end_time}")
                    continue
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–ª–∏–ø–∞
                clip_id = str(uuid.uuid4())
                clip_path = os.path.join(CLIPS_DIR, f"{clip_id}.mp4")
                
                logger.info(f"üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–ø #{i + 1}/{len(highlights)}: {start_time}s - {end_time}s")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞
                clip_segments = []
                for segment in transcript_segments:
                    seg_start = segment.get("start", 0)
                    seg_end = segment.get("end", 0)
                    
                    if seg_end > start_time and seg_start < end_time:
                        adjusted_segment = {
                            "start": max(0, seg_start - start_time),
                            "end": min(end_time - start_time, seg_end - start_time),
                            "text": segment.get("text", "")
                        }
                        clip_segments.append(adjusted_segment)
                
                # –°–æ–∑–¥–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
                subtitle_filter = ""
                if clip_segments:
                    subtitle_filter = create_subtitle_filter(clip_segments, style_id)
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –æ–±—Ä–µ–∑–∫–∏
                crop_filter = ""
                if format_id == "9:16":
                    crop_filter = "scale=1080:1920:force_original_aspect_ratio=increase,crop=1080:1920"
                elif format_id == "16:9":
                    crop_filter = "scale=1920:1080:force_original_aspect_ratio=increase,crop=1920:1080"
                elif format_id == "1:1":
                    crop_filter = "scale=1080:1080:force_original_aspect_ratio=increase,crop=1080:1080"
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                video_filter = ""
                if crop_filter and subtitle_filter:
                    video_filter = f"{crop_filter},{subtitle_filter}"
                elif crop_filter:
                    video_filter = crop_filter
                elif subtitle_filter:
                    video_filter = subtitle_filter
                
                # –ö–æ–º–∞–Ω–¥–∞ FFmpeg
                cmd = [
                    'ffmpeg', '-i', video_path,
                    '-ss', str(start_time),
                    '-to', str(end_time),
                    '-c:v', 'libx264', '-c:a', 'aac',
                    '-strict', 'experimental',
                    '-b:a', '128k'
                ]
                
                if video_filter:
                    cmd.extend(['-vf', video_filter])
                
                cmd.extend(['-y', clip_path])
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º FFmpeg
                result = subprocess.run(cmd, capture_output=True, text=True)
                
                if os.path.exists(clip_path):
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase
                    clip_url = upload_clip_to_supabase(clip_path, f"{clip_id}.mp4")
                    
                    clip_info = {
                        "clip_id": clip_id,
                        "highlight_index": i,
                        "start_time": start_time,
                        "end_time": end_time,
                        "duration": end_time - start_time,
                        "title": highlight.get("title", f"–ö–ª–∏–ø {i + 1}"),
                        "description": highlight.get("description", ""),
                        "url": clip_url
                    }
                    
                    generated_clips.append(clip_info)
                    logger.info(f"‚úÖ –ö–ª–∏–ø #{i + 1} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {clip_id}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–∞ #{i + 1}: {result.stderr}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–∞ #{i + 1}: {e}")
                continue
        
        if not generated_clips:
            raise HTTPException(status_code=500, detail="Failed to generate any clips")
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(generated_clips)} –∏–∑ {len(highlights)} –∫–ª–∏–ø–æ–≤")
        
        return {
            "video_id": video_id,
            "format_id": format_id,
            "style_id": style_id,
            "total_highlights": len(highlights),
            "generated_clips": len(generated_clips),
            "clips": generated_clips
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–ª–∏–ø–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/clips/download/{clip_id}")
async def download_clip(clip_id: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–ª–∏–ø–∞"""
    clip_path = os.path.join(CLIPS_DIR, f"{clip_id}.mp4")
    if not os.path.exists(clip_path):
        raise HTTPException(status_code=404, detail="Clip not found")
    
    return FileResponse(
        path=clip_path,
        filename=f"{clip_id}.mp4",
        media_type="video/mp4"
    )

def create_subtitle_filter(segments, style='modern'):
    """–°–æ–∑–¥–∞–µ—Ç FFmpeg —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –∫–∞—Ä–∞–æ–∫–µ-—ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
    if not segments:
        return ""
    
    # –°—Ç–∏–ª–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    styles = {
        'modern': {
            'fontsize': 48,
            'fontcolor': 'white',
            'bordercolor': 'black',
            'borderw': 3,
            'shadowcolor': 'black@0.5',
            'shadowx': 2,
            'shadowy': 2
        },
        'neon': {
            'fontsize': 52,
            'fontcolor': 'cyan',
            'bordercolor': 'magenta',
            'borderw': 2,
            'shadowcolor': 'black@0.8',
            'shadowx': 3,
            'shadowy': 3
        },
        'fire': {
            'fontsize': 50,
            'fontcolor': 'orange',
            'bordercolor': 'red',
            'borderw': 3,
            'shadowcolor': 'black@0.6',
            'shadowx': 2,
            'shadowy': 2
        },
        'elegant': {
            'fontsize': 46,
            'fontcolor': 'gold',
            'bordercolor': 'black',
            'borderw': 2,
            'shadowcolor': 'black@0.4',
            'shadowx': 1,
            'shadowy': 1
        }
    }
    
    current_style = styles.get(style, styles['modern'])
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è —Å–µ–≥–º–µ–Ω—Ç—ã —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–∏–π
    merged_segments = []
    for segment in sorted(segments, key=lambda x: x['start']):
        text = segment['text'].strip()
        if not text:
            continue
            
        start_time = segment['start']
        end_time = segment['end']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–µ–≥–º–µ–Ω—Ç–æ–º
        if merged_segments and start_time < merged_segments[-1]['end']:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–µ–≥–º–µ–Ω—Ç–æ–º
            merged_segments[-1]['text'] += ' ' + text
            merged_segments[-1]['end'] = max(merged_segments[-1]['end'], end_time)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
            merged_segments.append({
                'start': start_time,
                'end': end_time,
                'text': text
            })
    
    # –°–æ–∑–¥–∞–µ–º drawtext —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    drawtext_filters = []
    
    for i, segment in enumerate(merged_segments):
        start_time = segment['start']
        end_time = segment['end']
        text = segment['text'].strip()
        
        if not text:
            continue
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è FFmpeg
        text = text.replace("'", "\\'").replace(":", "\\:").replace("%", "\\%")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if len(text) > 80:
            text = text[:77] + "..."
        
        # –°–æ–∑–¥–∞–µ–º drawtext —Ñ–∏–ª—å—Ç—Ä —Å –∫–∞—Ä–∞–æ–∫–µ-—ç—Ñ—Ñ–µ–∫—Ç–æ–º
        drawtext = f"drawtext=text='{text}':fontsize={current_style['fontsize']}:fontcolor={current_style['fontcolor']}:bordercolor={current_style['bordercolor']}:borderw={current_style['borderw']}:shadowcolor={current_style['shadowcolor']}:shadowx={current_style['shadowx']}:shadowy={current_style['shadowy']}:x=(w-text_w)/2:y=h-text_h-50:enable='between(t,{start_time},{end_time})'"
        
        drawtext_filters.append(drawtext)
    
    if not drawtext_filters:
        return ""
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
    return ",".join(drawtext_filters)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–ø–∞
last_generated_clip = None

@app.get("/api/clips/generation/{clip_id}/status")
async def get_clip_generation_status(clip_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–ø–∞"""
    global last_generated_clip
    
    try:
        # –ï—Å–ª–∏ clip_id = "undefined", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–ø
        if clip_id == "undefined" and last_generated_clip:
            logger.info(f"üîÑ –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è undefined, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–ø: {last_generated_clip['clip_id']}")
            return {
                "status": "completed",
                "clip_id": last_generated_clip["clip_id"],
                "message": "–ö–ª–∏–ø —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω",
                "download_url": last_generated_clip["url"],
                "title": last_generated_clip.get("title", "–ö–ª–∏–ø"),
                "description": last_generated_clip.get("description", "")
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–ø–∞
        clip_path = os.path.join(CLIPS_DIR, f"{clip_id}.mp4")
        
        if os.path.exists(clip_path):
            # –ö–ª–∏–ø –≥–æ—Ç–æ–≤
            return {
                "status": "completed",
                "clip_id": clip_id,
                "message": "–ö–ª–∏–ø —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω",
                "download_url": f"/api/clips/download/{clip_id}"
            }
        else:
            # –ö–ª–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω
            return {
                "status": "not_found",
                "clip_id": clip_id,
                "message": "–ö–ª–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–ø–∞ {clip_id}: {e}")
        return {
            "status": "error",
            "clip_id": clip_id,
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=10000)

