#!/usr/bin/env python3
# worker.py - Background Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∑–∞–¥–∞—á
import os
import sys
import asyncio
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app import (
    hybrid_queue, 
    Config,
    get_video_duration,
    extract_audio,
    safe_transcribe_audio,
    analyze_with_chatgpt,
    create_fallback_highlights,
    get_memory_usage,
    check_memory_limit,
    cleanup_old_files
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("worker")

class VideoWorker:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∑–∞–¥–∞—á"""
    
    def __init__(self, worker_id: str):
        self.worker_id = worker_id
        self.running = False
        self.processed_count = 0
        self.error_count = 0
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞"""
        self.running = True
        logger.info(f"üîÑ –í–æ—Ä–∫–µ—Ä {self.worker_id} –∑–∞–ø—É—â–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        memory_info = get_memory_usage()
        logger.info(f"üíæ –ü–∞–º—è—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {memory_info['process_mb']}MB")
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                if not check_memory_limit():
                    logger.warning(f"‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä {self.worker_id}: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏")
                    cleanup_old_files()
                    await asyncio.sleep(10)
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                task = hybrid_queue.get_task()
                
                if task:
                    await self.process_task(task)
                else:
                    # –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                    await asyncio.sleep(2)
                    
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ {self.worker_id}: {e}")
                self.error_count += 1
                await asyncio.sleep(5)
    
    async def process_task(self, task: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        task_id = task["task_id"]
        video_id = task["video_id"]
        
        start_time = datetime.now()
        logger.info(f"üé¨ –í–æ—Ä–∫–µ—Ä {self.worker_id} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {task_id}")
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            result = await self.analyze_video_internal(video_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            hybrid_queue.complete_task(task_id, {
                "status": "completed",
                "result": result,
                "worker_id": self.worker_id,
                "processing_time": (datetime.now() - start_time).total_seconds(),
                "completed_at": datetime.now().isoformat()
            })
            
            self.processed_count += 1
            processing_time = (datetime.now() - start_time).total_seconds()
            logger.info(f"‚úÖ –í–æ—Ä–∫–µ—Ä {self.worker_id} –∑–∞–≤–µ—Ä—à–∏–ª {task_id} –∑–∞ {processing_time:.1f}s")
            
        except Exception as e:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
            hybrid_queue.complete_task(task_id, {
                "status": "failed",
                "error": str(e),
                "worker_id": self.worker_id,
                "processing_time": (datetime.now() - start_time).total_seconds(),
                "failed_at": datetime.now().isoformat()
            })
            
            self.error_count += 1
            logger.error(f"‚ùå –í–æ—Ä–∫–µ—Ä {self.worker_id} –æ—à–∏–±–∫–∞ –≤ {task_id}: {e}")
    
    async def analyze_video_internal(self, video_id: str) -> dict:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª
            video_files = [f for f in os.listdir(Config.UPLOAD_DIR) if f.startswith(video_id)]
            if not video_files:
                raise Exception("–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            video_path = os.path.join(Config.UPLOAD_DIR, video_files[0])
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ
            audio_path = os.path.join(Config.AUDIO_DIR, f"{video_id}.wav")
            if not extract_audio(video_path, audio_path):
                raise Exception("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            transcript_result = safe_transcribe_audio(audio_path)
            if not transcript_result:
                raise Exception("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            
            # –ê–Ω–∞–ª–∏–∑ —Å ChatGPT
            video_duration = get_video_duration(video_path)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
            if "words" in transcript_result:
                transcript_text = " ".join([word["word"] for word in transcript_result["words"]])
                transcript_words = transcript_result["words"]
            elif "segments" in transcript_result:
                transcript_text = " ".join([segment["text"] for segment in transcript_result["segments"]])
                transcript_words = []
                for segment in transcript_result["segments"]:
                    if "words" in segment:
                        transcript_words.extend(segment["words"])
            else:
                transcript_text = transcript_result.get("text", "")
                transcript_words = []
            
            analysis_result = analyze_with_chatgpt(transcript_text, video_duration)
            if not analysis_result:
                analysis_result = create_fallback_highlights(video_duration, 3)
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
            try:
                os.remove(audio_path)
            except:
                pass
            
            return {
                "highlights": analysis_result["highlights"],
                "transcript": transcript_words,
                "video_duration": video_duration
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ {video_id}: {e}")
            raise
    
    def get_stats(self) -> dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        return {
            "worker_id": self.worker_id,
            "processed_count": self.processed_count,
            "error_count": self.error_count,
            "running": self.running
        }
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞"""
        self.running = False
        logger.info(f"üõë –í–æ—Ä–∫–µ—Ä {self.worker_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ—Ä–∫–µ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
    worker_id = os.getenv("WORKER_ID", f"worker_{os.getpid()}")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–∞
    worker = VideoWorker(worker_id)
    
    try:
        await worker.start()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        worker.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        stats = worker.get_stats()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞: {stats}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
    asyncio.run(main())